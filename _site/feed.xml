<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Juanma's Blog</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2015-12-20T12:17:01+01:00</updated>
<id>/</id>
<author>
  <name>Juan Manuel Rey</name>
  <uri>/</uri>
  
</author>


  

<entry>
  <title type="html"><![CDATA[Upgrading VMware Integrated OpenStack]]></title>
  <link rel="alternate" type="text/html" href="/openstack/vmware/upgrading-vmware-integrated-openstack/" />
  <id>/openstack/vmware/upgrading-vmware-integrated-openstack</id>
  <published>2015-10-21T00:20:24+02:00</published>
  <updated>2015-10-21T00:20:24+02:00</updated>
  <author>
    <name></name>
    <uri></uri>
    
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/03/teamopenstackvmware.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/teamopenstackvmware.png?w=300&quot; alt=&quot;Team+OpenStack+@+VMware&quot; /&gt;&lt;/a&gt;In
a previous article I showed the process to &lt;a href=&quot;https://jreypo.wordpress.com/2015/04/29/how-to-patch-your-vio-environment/&quot;&gt;patch an existing VIO 1.0
installation&lt;/a&gt;, which
as you were able to see it is a clean and easy process. VMware announced
&lt;strong&gt;VMware Integrated OpenStack 2.0&lt;/strong&gt; during VMware US and it finally
became GA a few weeks ago.&lt;/p&gt;

&lt;p&gt;This new version of VIO has all OpenStack code updated up to the latest
Kilo release and comes packaged with many interesting features like
Load-Balancing-as-a-Service (LBaaS) or auto-scaling capabilities based
on Heat and Ceilometer.&lt;/p&gt;

&lt;p&gt;With a new VIO version hot of the press it is time now to upgrade your
VIO 1.0.x environment to 2.0 and take advantage of all those new great
goodies. The upgrade process is pretty straightforward and consist of
three main stages.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Upgrade VIO Management Server&lt;/li&gt;
  &lt;li&gt;Deploy a new VIO 2.0 environment&lt;/li&gt;
  &lt;li&gt;Perform the data migration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keep in mind that you will need to have enough hardware resources in
your management cluster to be able to host two full fledged VIO
installations at the same time during the migration process. Just for
the sake of transparency, the lab environment where I test the upgrade
is based on vSphere 5.5 Update 2, NSX for vSphere 6.1.4 and VIO 1.0.2.&lt;/p&gt;

&lt;h3 id=&quot;step-1---upgrade-vio-management-server&quot;&gt;Step 1 - Upgrade VIO Management Server&lt;/h3&gt;

&lt;p&gt;From VMware website download the &lt;code&gt;.deb&lt;/code&gt; upgrade package and upload it to
VIO Management Server.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/10/screen-shot-2015-10-20-at-12-59-50.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2015-10-20-at-12-59-50.png?w=580&quot; alt=&quot;Download VIO upgrade
package&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Stage the upgrade package.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;viouser@vio-oms:~$ sudo viopatch add -l vio-1.0-upgrade_2.0.0.3037964_all.deb
[sudo] password for viouser:
vio-1.0-upgrade_2.0.0.3037964_all.deb patch has been added.
viouser@vio-oms:~$ viopatch list
Name            Version       Type   Installed
--------------- ------------- ------ -----------
vio-1.0-upgrade 2.0.0.3037964 infra  No
vio-patch-2     1.0.2.2813500 infra  Yes

viouser@vio-oms:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Upgrade the management server with &lt;code&gt;viopatch&lt;/code&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;viouser@vio-oms:~$ sudo viopatch install -p vio-1.0-upgrade -v 2.0.0.3037964
Installing patch vio-1.0-upgrade version 2.0.0.3037964
done
Installation complete for patch vio-1.0-upgrade version 2.0.0.3037964
viouser@vio-oms:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go to the vSphere Web Client, logout and log back in to verify that the
new version is correct.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/10/vio-oms-upgraded.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/vio-oms-upgraded.png?w=580&quot; alt=&quot;vio-oms-upgraded&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-2---deploy-a-new-vio-20-environment&quot;&gt;Step 2 - Deploy a new VIO 2.0 environment&lt;/h3&gt;

&lt;p&gt;With VIO Management Server upgraded is now time to deploy a fresh 2.0
environment. In the VIO plugin go to &lt;strong&gt;Manage&lt;/strong&gt; section and a new
&lt;strong&gt;Upgrades&lt;/strong&gt; tab will be there. Before&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/10/vio-upgrades-tab.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/vio-upgrades-tab.png?w=580&quot; alt=&quot;vio-upgrades-tab&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before starting with the deployment check in the &lt;strong&gt;Networks&lt;/strong&gt; tab that
there are enough free IP address for the new deployment, if there aren’t
then add a new IP range.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/10/new_ip_range.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/new_ip_range.png?w=580&quot; alt=&quot;new_ip_range&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the &lt;strong&gt;Upgrad&lt;/strong&gt;e &lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2015-10-20-at-13-49-34.png&quot; alt=&quot;Screen Shot 2015-10-20 at
13.49.34&quot; /&gt;
icon. Select if you want to participate in the Customer experience
improvement program, my recommendation here is to say yes to help our
engineering team to improve VIO upgrade experience even more ;-), and
enter the name for the new deployment.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/10/deployment_name.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/deployment_name.png?w=580&quot; alt=&quot;deployment_name&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter the IP addresses for the public and private load balanced IP
addresses, keep in mind that these IP addresses must belong to the API
subnet of the existing VIO 1.0 environment in case of the public and to
the management network segment in the case of the private one.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/10/lb_vio2_ips.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/lb_vio2_ips.png?w=580&quot; alt=&quot;lb_vio2_ips&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the last screen review the configured values and click &lt;strong&gt;Finish&lt;/strong&gt;.
The new environment will be deployed and you will be able to monitor it
from the &lt;strong&gt;Upgrades&lt;/strong&gt; tab.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/10/vio2_new_deployment.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/vio2_new_deployment.png?w=580&quot; alt=&quot;vio2_new_deployment&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-3---migrate-the-data&quot;&gt;Step 3 - Migrate the data&lt;/h3&gt;

&lt;p&gt;With the new environment up and ready we can start the data migration.
From the &lt;strong&gt;Upgrades&lt;/strong&gt; tab right-click in the your existing VIO 1.0
installation and select &lt;strong&gt;Migrate Data&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/10/migrate_vio_data.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/migrate_vio_data.png?w=580&quot; alt=&quot;migrate_vio_data&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The migration wizard will ask for confirmation, click &lt;strong&gt;OK&lt;/strong&gt;. During the
data migration all OpenStack service will be unavailable.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/10/data_migration.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/data_migration.png?w=580&quot; alt=&quot;data_migration&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When the migration process is finished the status of the new VIO 2.0
environment will appear as &lt;strong&gt;Migrated&lt;/strong&gt; and the previous VIO 1.0 will
appear as &lt;strong&gt;Stopped&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/10/vio_migrated.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/vio_migrated.png?w=580&quot; alt=&quot;vio_migrated&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open a browser and connect the VIO 2.0 public IP to access OpenStack
Horizon interface, login and verify that all your workloads, networks,
image, etc have been properly migrated. Logout from Horizon and go back
to the Web Client. Now that the data has been migrated we need to
migrate the original Public Virtual IP to the new environment.&lt;/p&gt;

&lt;p&gt;Right-click on VIO 1.0 deployment and from the menu select &lt;strong&gt;Switch To
New Deployment&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/10/switch_vio_ip.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/switch_vio_ip.png?w=580&quot; alt=&quot;switch_vio_ip&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A new pop-up will appear asking for confirmation since again the
OpenStack service will be unavailable during the IP reconfiguration.&lt;/p&gt;

&lt;p&gt;After the reconfiguration the new VIO 2.0 deployment will be in
&lt;strong&gt;Running&lt;/strong&gt; status and the Public Virtual IP will be the same as the
former 1.0 deployment.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/10/migration_finished.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/migration_finished.png?w=580&quot; alt=&quot;migration_finished&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The upgrading procedure is finished. We can now access now Horizon using
the existing FQDN, verify that everything is still working and enjoy
your new OpenStack Kilo environment.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/10/horizon_kilo.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/horizon_kilo.png?w=580&quot; alt=&quot;horizon_kilo&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the same way as patching, with VIO upgrading your OpenStack cloud
does not have to be a painful experience, VIO provides the best
OpenStack experience in a vSphere environment. Kudos to my colleagues of
the &lt;strong&gt;Team OpenStack @ VMware&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Happy Stacking!&lt;/p&gt;

&lt;p&gt;Juanma.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/openstack/vmware/upgrading-vmware-integrated-openstack/&quot;&gt;Upgrading VMware Integrated OpenStack&lt;/a&gt; was originally published by Juan Manuel Rey at &lt;a href=&quot;&quot;&gt;Juanma's Blog&lt;/a&gt; on October 21, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Give me OpenStack and give me Liberty!]]></title>
  <link rel="alternate" type="text/html" href="/cloud/openstack/give-me-openstack-and-give-me-liberty/" />
  <id>/cloud/openstack/give-me-openstack-and-give-me-liberty</id>
  <published>2015-10-17T18:28:10+02:00</published>
  <updated>2015-10-17T18:28:10+02:00</updated>
  <author>
    <name>Juan Manuel Rey</name>
    <uri></uri>
    <email>Juan Manuel Rey</email>
  </author>
  <content type="html">
    &lt;figure&gt;&lt;img src=&quot;/images/resizedimage456224-openstack-liberty-logo.png&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;During this past week the &lt;strong&gt;&lt;a href=&quot;https://www.openstack.org/foundation/&quot;&gt;OpenStackFoundation&lt;/a&gt;&lt;/strong&gt; has finally released &lt;strong&gt;Liberty&lt;/strong&gt;, the latest version of our favorite cloud software. This is the twelfth iteration of OpenStack and bring many new great features. To name the most interesting to me.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Enhanced Manageability - Finer-grained access controls and security settings, a new role-based access control (RBAC) for the Heat and Neutron and simplified management capabilities.&lt;/li&gt;
  &lt;li&gt;Enhanced Orchestration - Heat comes with lots of new resources for management, automation and orchestration to support all new Liberty management capabilities.&lt;/li&gt;
  &lt;li&gt;Container Management - &lt;a href=&quot;https://wiki.openstack.org/wiki/Magnum&quot;&gt;Mangum&lt;/a&gt;, the container management piece of OpenStack, makes its debut with Liberty. With support for container cluster management software like Kubernetes, Mesos and Docker Swarm.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m eager to get my hands dirty with Magnum and all new Heat capabilities.&lt;/p&gt;

&lt;p&gt;Finally the OpenStack Foundation has released this great video showcasing Liberty core services.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/e7r2-p8Mki4&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
You can also get the details about all changes in &lt;a href=&quot;https://wiki.openstack.org/wiki/ReleaseNotes/Liberty&quot;&gt;Liberty Release Notes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy stacking!&lt;/p&gt;

&lt;p&gt;Juanma.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/cloud/openstack/give-me-openstack-and-give-me-liberty/&quot;&gt;Give me OpenStack and give me Liberty!&lt;/a&gt; was originally published by Juan Manuel Rey at &lt;a href=&quot;&quot;&gt;Juanma's Blog&lt;/a&gt; on October 17, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[DNF, the new Fedora package manager]]></title>
  <link rel="alternate" type="text/html" href="/linux/red%20hat/sysadmin/dnf-the-new-fedora-package-manager/" />
  <id>/linux/red%20hat/sysadmin/dnf-the-new-fedora-package-manager</id>
  <published>2015-10-11T19:05:31+02:00</published>
  <updated>2015-10-11T19:05:31+02:00</updated>
  <author>
    <name></name>
    <uri></uri>
    
  </author>
  <content type="html">
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://getfedora.org/&quot;&gt;Fedora 22&lt;/a&gt;&lt;/strong&gt; was released a few months ago
and amongst many new features it came with a replacement for &lt;code&gt;yum&lt;/code&gt; as
package manager called &lt;code&gt;dnf&lt;/code&gt;, or DaNdiFied YUM, oh yes &lt;code&gt;yum&lt;/code&gt; is still
around but it is now considered legacy software. Also DNF will become in
the near future the default package manager for RHEL and CentOS so it is
for the best that you get familiarized with it sooner than later.&lt;/p&gt;

&lt;h3 id=&quot;dnf-commands&quot;&gt;DNF Commands&lt;/h3&gt;

&lt;p&gt;The first thing you need to understand about &lt;code&gt;dnf&lt;/code&gt; is that many commands
are basically still the same but there are differences. Package
management commands can be executed with almost the same syntax
previously used with &lt;code&gt;yum&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Search for a package.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[jrey@fed22-srv ~]$ sudo dnf search htop
Last metadata expiration check performed 1:25:54 ago on Mon Oct 5 23:47:45 2015.
=================================== N/S Matched: htop ====================================
htop.x86_64 : Interactive process viewer
php-lightopenid.noarch : PHP OpenID library
[jrey@fed22-srv ~]$&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Install a package.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[jrey@fed22-srv ~]$ sudo dnf install htop&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Remove a package.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[jrey@fed22-srv ~]$ sudo dnf remove htop&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Get information about a package&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[jrey@fed22-srv ~]$ sudo dnf info htop
Last metadata expiration check performed 1:47:13 ago on Mon Oct 5 23:47:45 2015.
Available Packages
Name : htop
Arch : x86_64
Epoch : 0
Version : 1.0.3
Release : 4.fc22
Size : 91 k
Repo : fedora
Summary : Interactive process viewer
URL : http://hisham.hm/htop/
License : GPL+
Description : htop is an interactive text-mode process viewer for Linux, similar to
 : top(1).

[jrey@fed22-srv ~]$&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Group and repository management commands are still the same as well.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[jrey@fed22-srv ~]$ sudo dnf repolist&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Querying the available repositories for a specific command.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[jrey@fed22-srv ~]$ sudo dnf repoquery --whatprovides htop
Last metadata expiration check performed 1:54:52 ago on Mon Oct 5 23:47:45 2015.
htop-0:1.0.3-4.fc22.x86_64
[jrey@fed22-srv ~]$&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;dnf&lt;/code&gt; comes with some powerful capabilities like history query.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[jrey@fed22-srv ~]$ sudo dnf history list
Last metadata expiration check performed 11 days, 19:14:54 ago on Wed Oct 7 02:56:21 2015.
ID | Command line             | Date a           | Action  | Altere
-------------------------------------------------------------------------------
 9 | history undo 8           | 2015-10-06 01:53 | Install | 1
 8 | erase htop               | 2015-10-06 01:28 | Erase   | 1
 7 | install htop -y          | 2015-10-06 01:28 | Install | 1
 6 | remove htop              | 2015-10-06 01:14 | Erase   | 1
 5 | install htop             | 2015-10-06 01:14 | Install | 1
 4 | install make gcc kernel- | 2015-09-30 16:21 | Install | 9
 3 | update                   | 2015-09-30 15:43 | I, U    | 112
 2 | update                   | 2015-09-16 11:45 | I, O, U | 297
 1 |                          | 2015-09-16 10:59 | Install | 658 EE
[jrey@fed22-srv ~]$&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This can be specially helpful if you need to rollback a change, like
clean up dependencies after uninstalling a package or reinstall a
package.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[jrey@fed22-srv ~]$ sudo history undo 8&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can also look for duplicated within the installed ones.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[jrey@fed22-srv ~]$ sudo dnf repoquery --duplicated
Last metadata expiration check performed 0:30:42 ago on Tue Oct 6 02:48:41 2015.
kernel-core-0:4.0.4-301.fc22.x86_64
kernel-core-0:4.1.6-201.fc22.x86_64
kernel-core-0:4.1.7-200.fc22.x86_64
kernel-modules-0:4.0.4-301.fc22.x86_64
kernel-modules-0:4.1.6-201.fc22.x86_64
kernel-modules-0:4.1.7-200.fc22.x86_64
[jrey@fed22-srv ~]$&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Retrieve all available packages providing a specific software of
capability.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[jrey@fed22-srv ~]$ sudo dnf repoquery --whatprovides curl
Last metadata expiration check performed 0:38:00 ago on Tue Oct 6 02:48:41 2015.
curl-0:7.40.0-3.fc22.x86_64
curl-0:7.40.0-7.fc22.x86_64
[jrey@fed22-srv ~]$&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is a very basic introduction to &lt;code&gt;dnf&lt;/code&gt; capabilities but hopefully
you have been able to get how it works. My advice is to review &lt;a href=&quot;http://dnf.readthedocs.org/en/latest/index.html&quot;&gt;DNF
documentation&lt;/a&gt; for all
the details.&lt;/p&gt;

&lt;h3 id=&quot;the-photon-connection&quot;&gt;The Photon Connection&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://vmware.github.io/photon/&quot;&gt;&lt;strong&gt;VMware Photon&lt;/strong&gt;&lt;/a&gt; comes with &lt;code&gt;tdnf&lt;/code&gt;
(Tiny DNF); this is a development by VMware that comes with compatible
repository and package management capabilites. Not every &lt;code&gt;dnf&lt;/code&gt; command
is available but the basic ones are there.
&lt;br /&gt;
&lt;br /&gt;
Package installation and updates.
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;&amp;quot;/assets/screen-shot-2015-10-11-at-19-41-00.png?w=580&amp;quot;&quot; alt=&quot;Package install with tdnf&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
Repository management.
&lt;br /&gt;
&lt;br /&gt;
&lt;img src=&quot;/assets/screen-shot-2015-10-11-at-18-54-47.png&quot; alt=&quot;Repository management with tdnf&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the future if I find the time I’ll write a new post with some advanced examples of &lt;code&gt;dnf&lt;/code&gt; commands. Comments are welcome.&lt;/p&gt;

&lt;p&gt;Juanma.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/linux/red%20hat/sysadmin/dnf-the-new-fedora-package-manager/&quot;&gt;DNF, the new Fedora package manager&lt;/a&gt; was originally published by Juan Manuel Rey at &lt;a href=&quot;&quot;&gt;Juanma's Blog&lt;/a&gt; on October 11, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[First steps with Pivotal Lattice]]></title>
  <link rel="alternate" type="text/html" href="/cloud-native/devops/pivotal/first-steps-with-pivotal-lattice/" />
  <id>/cloud-native/devops/pivotal/first-steps-with-pivotal-lattice</id>
  <published>2015-10-02T13:40:08+02:00</published>
  <updated>2015-10-02T13:40:08+02:00</updated>
  <author>
    <name></name>
    <uri></uri>
    
  </author>
  <content type="html">
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://lattice.cf/&quot;&gt;Lattice&lt;/a&gt;&lt;/strong&gt; is the latest addition from
&lt;strong&gt;&lt;a href=&quot;http://pivotal.io/&quot;&gt;Pivotal&lt;/a&gt;&lt;/strong&gt; to its portfolio of open source
projects. Lattice leverages various components from &lt;strong&gt;&lt;a href=&quot;http://pivotal.io/platform&quot;&gt;Cloud
Foundry&lt;/a&gt;&lt;/strong&gt;, in order to run containerized
workloads in a cluster.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Diego&lt;/strong&gt; - The new Cloud Foundry elastic runtime. Acts as an
action-based scheduler and provides support for Docker images.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Doppler&lt;/strong&gt; - The log and metric aggregator for the platform and the
running workloads.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Gorouter&lt;/strong&gt; - A software-based router with reverse
proxy capabilities. Dynamically updated as the containers are spun
up and down.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first fact we need to understand about Lattice is that it is not
intended to run production workloads. Instead Lattice is meant to be run
on &lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;Virtualbox&lt;/a&gt; or VMware Fusion using
&lt;a href=&quot;https://www.vagrantup.com/&quot;&gt;Vagrant&lt;/a&gt;. In the end Lattice is an easy
way to leverage all the power of Cloud Foundry for running containers,
in your laptop and without having to bother about all Cloud Foundry
installation details.&lt;/p&gt;

&lt;h3 id=&quot;deploying-lattice&quot;&gt;Deploying Lattice&lt;/h3&gt;

&lt;p&gt;Installing and running Lattice in your laptop is relatively easy
process, first of all we will need  First download the latest package
from &lt;a href=&quot;https://github.com/cloudfoundry-incubator/lattice/releases&quot;&gt;GitHub
Releases&lt;/a&gt;
page for Lattice, there are packages available for Linux and OS X.&lt;/p&gt;

&lt;p&gt;Unzip the package in a directory with the rest of your virtual machines.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;unzip lattice-bundle-v0.4.3-osx.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now copy the &lt;code&gt;ltc&lt;/code&gt; utility to a directory in your PATH, I always use
&lt;code&gt;/usr/local/bin&lt;/code&gt; for this kind of binaries.&lt;/p&gt;

&lt;h3 id=&quot;running-lattice&quot;&gt;Running Lattice&lt;/h3&gt;

&lt;p&gt;Running Lattice should be quite simple, just change to &lt;code&gt;vagrant&lt;/code&gt;
directory on Lattice installation path, then execute &lt;code&gt;vagrant up&lt;/code&gt;
command and that’s it. However there is a caveat, by default the
Vagranfile will use the IP address 192.168.11.11 if &lt;code&gt;LATTICE_SYSTEM_IP&lt;/code&gt;
variable is not provided during the execution.&lt;/p&gt;

&lt;p&gt;To avoid this issue pass &lt;code&gt;LATTICE_SYSTEM_IP&lt;/code&gt; variable to Vagrant during
the execution. I personally have used both &lt;a href=&quot;http://www.vmware.com/products/fusion&quot;&gt;VMware
Fusion&lt;/a&gt; and &lt;a href=&quot;https://communities.vmware.com/community/vmtn/devops/vmware-appcatalyst&quot;&gt;VMware
AppCatalyst&lt;/a&gt;
but you can use Virtualbox too. For the AppCatalyst the only requirement
is to have &lt;code&gt;appcatalyst-daemon&lt;/code&gt; running since it is needed by the
Vagrant provider.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LATTICE_SYSTEM_IP=192.168.161.11 vagrant up --provider vmware_fusion
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this we will have our Lattice instance up and running. Next we need
to tell &lt;code&gt;ltc&lt;/code&gt; how to connect to our Lattice instance, this operation is
called targeting.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ltc target 192.168.161.11.xip.io
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the API endpoint set let’s deploy our first application, for this
example we will use Lattice example app. Run the &lt;code&gt;ltc create&lt;/code&gt; command
with the name of the new app and the container to be spun up as the
arguments.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/10/screen-shot-2015-10-02-at-13-33-37.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2015-10-02-at-13-33-37.png?w=580&quot; alt=&quot;Screen Shot 2015-10-02 at
13.33.37&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Open your favorite browser and access
https://my-app.192.168.161.11.xip.io.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/10/screen-shot-2015-10-02-at-13-44-24.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2015-10-02-at-13-44-24.png?w=580&quot; alt=&quot;Screen Shot 2015-10-02 at
13.44.24&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The index indicates the node that we are accessing. Next we will scale
up the application adding two additional containers. Use &lt;code&gt;ltc scale&lt;/code&gt; to
add additional instances of the app and &lt;code&gt;ltc status&lt;/code&gt; to retrieve the
status.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/10/screen-shot-2015-10-02-at-14-22-40.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2015-10-02-at-14-22-40.png?w=580&quot; alt=&quot;Screen Shot 2015-10-02 at
14.22.40&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another useful operation with &lt;code&gt;ltc&lt;/code&gt; is the capacity to get the logs for
your app.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; 2015-10-02 14:23:18 ☆ trantor in ~
○ → ltc logs my-app
10/02 14:30:11.10 [APP|2] Lattice-app. Says Hello. on index: 2
10/02 14:30:11.28 [APP|0] Lattice-app. Says Hello. on index: 0
10/02 14:30:11.60 [APP|1] Lattice-app. Says Hello. on index: 1
10/02 14:30:12.10 [APP|2] Lattice-app. Says Hello. on index: 2
10/02 14:30:12.28 [APP|0] Lattice-app. Says Hello. on index: 0
10/02 14:30:12.60 [APP|1] Lattice-app. Says Hello. on index: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’ll let you to add more apps to Lattice and to play around with &lt;code&gt;ltc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Comments are welcome, as always.&lt;/p&gt;

&lt;p&gt;Juanma.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/cloud-native/devops/pivotal/first-steps-with-pivotal-lattice/&quot;&gt;First steps with Pivotal Lattice&lt;/a&gt; was originally published by Juan Manuel Rey at &lt;a href=&quot;&quot;&gt;Juanma's Blog&lt;/a&gt; on October 02, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[How to configure a remote syslog server for NSX Controller]]></title>
  <link rel="alternate" type="text/html" href="/devops/vmware/how-to-configure-a-remote-syslog-server-for-nsx-controller/" />
  <id>/devops/vmware/how-to-configure-a-remote-syslog-server-for-nsx-controller</id>
  <published>2015-09-30T02:00:22+02:00</published>
  <updated>2015-09-30T02:00:22+02:00</updated>
  <author>
    <name></name>
    <uri></uri>
    
  </author>
  <content type="html">
    &lt;p&gt;As with the rest of &lt;strong&gt;NSX for vSphere&lt;/strong&gt; components any competent admin
would like to configure a remote syslog server for the NSX Controllers,
in my homelab I have vRealize Log Insight and recently I decided to
configure it on my NSX Controllers and document the procedure here
mostly as self-reference.&lt;/p&gt;

&lt;p&gt;NSX Manager has the option to configure a remote syslog server using its
management web site, but where is the option for the Controllers? Well,
if you lurk around NSX interface in vSphere Web Client will quickly
notice that the option is somehow missing.  Actually the only option to
enable it is using NSX REST API. Let’s see how to do it.&lt;/p&gt;

&lt;p&gt;For this post I will use Firefox REST Client Add-on but you can use your
favorite REST client. Firstly any REST API call will require at least
the Authentication header, in Firefox REST Client click on
&lt;em&gt;Authentication&lt;/em&gt; drop-down menu, select &lt;em&gt;Basic Authentication&lt;/em&gt; and enter
the admin credentials.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/09/screen-shot-2015-09-30-at-02-25-19.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2015-09-30-at-02-25-19.png?w=300&quot; alt=&quot;Screen Shot 2015-09-30 at
02.25.19&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Additionally PUT and POST methods will require you to set a custom
header with the following values that will define the content of the
HTTP Request body. Use these values.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Name: Content-Type&lt;/li&gt;
  &lt;li&gt;Value: application/xml&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With these two headers set enter the API URL, in my case it is:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;https://nsxm-01.mcorp.local/api/2.0/vdn/controller/controller-1/syslog&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To construct this URL you will need the controller ID that can be get
in the NSX interface in vSphere Web Client as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/09/screen-shot-2015-09-30-at-02-50-38.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2015-09-30-at-02-50-38.png?w=580&quot; alt=&quot;Screen Shot 2015-09-30 at
02.50.38&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select POST as the method. You will need to enter the body for the HTTP
Request, in XML format. Use the below code as an example to build the
content for the HTTP Request body.&lt;/p&gt;

&lt;p&gt;https://gist.github.com/jreypo/8840b4e887095e5a460d&lt;/p&gt;

&lt;p&gt;This XML code will indicate the NSX Manager to set the IP address in the
&lt;code&gt;syslogServer&lt;/code&gt; node as the remote syslog server for the controller in
the URL. The protocol, port and log level are also defined.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/09/screen-shot-2015-09-17-at-01-14-19.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2015-09-17-at-01-14-19.png?w=580&quot; alt=&quot;Screen Shot 2015-09-17 at
01.14.19&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Submit the request and if everything is configured as described you will
receive a &lt;code&gt;200 OK&lt;/code&gt; status code.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/09/screen-shot-2015-09-17-at-01-15-06.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2015-09-17-at-01-15-06.png?w=580&quot; alt=&quot;Screen Shot 2015-09-17 at
01.15.06&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point the syslog server is configured for all NSX Controllers,
you can check the status using also an API call with the same URL and
selecting GET method.&lt;/p&gt;

&lt;p&gt;Comments are welcome.&lt;/p&gt;

&lt;p&gt;Juanma.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/devops/vmware/how-to-configure-a-remote-syslog-server-for-nsx-controller/&quot;&gt;How to configure a remote syslog server for NSX Controller&lt;/a&gt; was originally published by Juan Manuel Rey at &lt;a href=&quot;&quot;&gt;Juanma's Blog&lt;/a&gt; on September 30, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[How to fix VIO Web Client Plugin after a failed deployment]]></title>
  <link rel="alternate" type="text/html" href="/openstack/vmware/how-to-fix-vio-web-client-plugin-after-a-failed-deployment/" />
  <id>/openstack/vmware/how-to-fix-vio-web-client-plugin-after-a-failed-deployment</id>
  <published>2015-06-08T00:43:46+02:00</published>
  <updated>2015-06-08T00:43:46+02:00</updated>
  <author>
    <name></name>
    <uri></uri>
    
  </author>
  <content type="html">
    &lt;p&gt;It occurred to me recently that after recovering a VIO failed
deployment, in my case an issue with one of the database nodes, in the
Web Client Plugin the OpenStack Cluster still was in &lt;strong&gt;Error&lt;/strong&gt; state.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/06/screen-shot-2015-06-01-at-12-25-15.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2015-06-01-at-12-25-15.png?w=580&quot; alt=&quot;Screen Shot 2015-06-01 at
12.25.15&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After investigating a bit internally and thanks to my colleague Dimitri
Desmidt I was able to solve it.&lt;/p&gt;

&lt;p&gt;Open an SSH connection as &lt;code&gt;viouser&lt;/code&gt; to the VIO Management Server and
elevate to &lt;code&gt;root&lt;/code&gt;. Launch &lt;code&gt;psql&lt;/code&gt; with the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/opt/vmware/vpostgres/current/bin/psql -U omsdb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From &lt;code&gt;psql&lt;/code&gt; prompt execute:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;update cluster set status=&#39;RUNNING&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After that logout and login back to Web Client and the cluster will be
now in &lt;strong&gt;Running&lt;/strong&gt; status.&lt;/p&gt;

&lt;p&gt;Juanma.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/openstack/vmware/how-to-fix-vio-web-client-plugin-after-a-failed-deployment/&quot;&gt;How to fix VIO Web Client Plugin after a failed deployment&lt;/a&gt; was originally published by Juan Manuel Rey at &lt;a href=&quot;&quot;&gt;Juanma's Blog&lt;/a&gt; on June 08, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[How to patch your VIO environment]]></title>
  <link rel="alternate" type="text/html" href="/openstack/vmware/how-to-patch-your-vio-environment/" />
  <id>/openstack/vmware/how-to-patch-your-vio-environment</id>
  <published>2015-04-29T00:20:47+02:00</published>
  <updated>2015-04-29T00:20:47+02:00</updated>
  <author>
    <name></name>
    <uri></uri>
    
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/03/teamopenstackvmware.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/teamopenstackvmware.png?w=300&quot; alt=&quot;Team+OpenStack+@+VMware&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;http://www.vmware.com&quot;&gt;VMware&lt;/a&gt;
has released the first patch for &lt;strong&gt;VMware Integrated OpenStack&lt;/strong&gt;. This
patch release comes with improvements around the installer, Keystone
service and fixes some security issues. Review the &lt;a href=&quot;https://www.vmware.com/support/integrated-openstack/doc/vmware-integrated-openstack-101-release-notes.html&quot;&gt;Release
Notes&lt;/a&gt;
to get full details of what is included.&lt;/p&gt;

&lt;p&gt;After the patch was released I thought it was a perfect time to upgrade
my VIO lab, document the procedure and publish it, so without further
ado lets get some patches installed!&lt;/p&gt;

&lt;h3 id=&quot;step-1---upload-and-install-the-patch&quot;&gt;Step 1 - Upload and install the patch&lt;/h3&gt;

&lt;p&gt;Get the patch from &lt;a href=&quot;https://my.vmware.com/group/vmware/info?slug=datacenter_cloud_infrastructure/vmware_integrated_openstack/1_0&quot;&gt;VIO product download
page&lt;/a&gt;,
of course you need to have the proper rights to do it, the patch is a
Debian package in &lt;code&gt;deb&lt;/code&gt; format. There are some caveats here, the way to
upload and install the patch is using vSphere Web Client from &lt;strong&gt;Manage
-&amp;gt;  Updates&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/04/screen-shot-2015-04-28-at-23-38-55.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2015-04-28-at-23-38-55.png?w=580&quot; alt=&quot;Screen Shot 2015-04-28 at
23.38.55&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However after the immediate release of the patch an issue was identified
using this method and currently until it is solved the safest way to do
it is using the CLI. Use your favorite SCP/SFTP client to upload the
patch to VIO Management Server as &lt;code&gt;viouser&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Add the patch using &lt;code&gt;viopatch&lt;/code&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;viouser@vio-manager:~$ sudo viopatch add -l /home/viouser/vio-patch-1_1.0.1.2668568_all.deb
[sudo] password for viouser:
/home/viouser/vio-patch-1_1.0.1.2668568_all.deb patch has been added.
viouser@vio-manager:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;List the patches to verify that has been added.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;viouser@vio-manager:~$ viopatch list
Name         Version        Type    Installed
-----------  -------------  ------  -----------
vio-patch-1  1.0.1.2668568  infra   No

viouser@vio-manager:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install the patch, before installing verify that VIO Cluster is in
Running status or the update will fail. The patch can also be applied
before deploying OpenStack.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;viouser@vio-manager:~$ sudo viopatch install --patch vio-patch-1 --version 1.0.1.2668568
[sudo] password for viouser:
Installing patch vio-patch-1 version 1.0.1.2668568
done
Installation complete for patch vio-patch-1 version 1.0.1.2668568
viouser@vio-manager:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;step-2---verify-the-installation&quot;&gt;Step 2 - Verify the installation&lt;/h3&gt;

&lt;p&gt;Log out and log in back in vSphere Web Client. The new version and build
number can be verified in the Summary tab.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/04/screen-shot-2015-04-29-at-01-09-21.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2015-04-29-at-01-09-21.png?w=580&quot; alt=&quot;Screen Shot 2015-04-29 at
01.09.21&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also in &lt;strong&gt;Manage -&amp;gt; Updates&lt;/strong&gt; the newly installed patch can be seen
in more detail.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/04/screen-shot-2015-04-29-at-01-09-53.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2015-04-29-at-01-09-53.png?w=580&quot; alt=&quot;Screen Shot 2015-04-29 at
01.09.53&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ans this is it. Anyone that has ever to endure the pain of patching an
OpenStack installation, either lab or production environment, I am sure
that will appreciate how clean and easy is the process in VIO.&lt;/p&gt;

&lt;p&gt;Juanma.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/openstack/vmware/how-to-patch-your-vio-environment/&quot;&gt;How to patch your VIO environment&lt;/a&gt; was originally published by Juan Manuel Rey at &lt;a href=&quot;&quot;&gt;Juanma's Blog&lt;/a&gt; on April 29, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[FirewallD quickstart guide]]></title>
  <link rel="alternate" type="text/html" href="/linux/red%20hat/security/sysadmin/firewalld-quickstart-guide/" />
  <id>/linux/red%20hat/security/sysadmin/firewalld-quickstart-guide</id>
  <published>2015-04-08T14:30:16+02:00</published>
  <updated>2015-04-08T14:30:16+02:00</updated>
  <author>
    <name>Juan Manuel Rey</name>
    <uri></uri>
    <email>Juan Manuel Rey</email>
  </author>
  <content type="html">
    &lt;section id=&quot;table-of-contents&quot; class=&quot;toc&quot;&gt;
  &lt;header&gt;
    &lt;h3&gt;&lt;i class=&quot;fa fa-book&quot;&gt;&lt;/i&gt; Overview&lt;/h3&gt;
  &lt;/header&gt;
&lt;div id=&quot;drawer&quot;&gt;
&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#checking-firewalld-service-status&quot; id=&quot;markdown-toc-checking-firewalld-service-status&quot;&gt;Checking FirewallD service status&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#managing-firewall-zones&quot; id=&quot;markdown-toc-managing-firewall-zones&quot;&gt;Managing firewall zones&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#interfaces-and-sources&quot; id=&quot;markdown-toc-interfaces-and-sources&quot;&gt;Interfaces and sources&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#services&quot; id=&quot;markdown-toc-services&quot;&gt;Services&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#other-operations&quot; id=&quot;markdown-toc-other-operations&quot;&gt;Other operations&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#masquerading-and-port-forwading&quot; id=&quot;markdown-toc-masquerading-and-port-forwading&quot;&gt;Masquerading and port forwading&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#set-direct-rules&quot; id=&quot;markdown-toc-set-direct-rules&quot;&gt;Set direct rules&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#port-management&quot; id=&quot;markdown-toc-port-management&quot;&gt;Port management&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

  &lt;/div&gt;
&lt;/section&gt;
&lt;!-- /#table-of-contents --&gt;

&lt;p&gt;&lt;strong&gt;FirewallD&lt;/strong&gt;, or Dynamic Firewall Manager, is the replacement for the &lt;strong&gt;IPTables&lt;/strong&gt; firewall in &lt;strong&gt;Red Hat Enterprise Linux&lt;/strong&gt;. The main improvement over IPTables is the capacity to make changes without the need to restart the whole firewall service.
&lt;br /&gt;
&lt;br /&gt;
FirewallD was first introduced in Fedora 18 and has been the default firewall mechanism for Fedora since then. Finally this year Red Hat decided to include it in RHEL 7, and of course it also made its way to the different RHEL clones like CentOS 7 and Scientific Linux 7.&lt;/p&gt;

&lt;h3 id=&quot;checking-firewalld-service-status&quot;&gt;Checking FirewallD service status&lt;/h3&gt;

&lt;p&gt;To get the basic status of the service simply use &lt;code&gt;firewall-cmd --state&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[root@centos7 ~]# firewall-cmd --state
running
[root@centos7 ~]#&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you need to get a more detailed state of the service you can always use &lt;code&gt;systemctl&lt;/code&gt; command.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[root@centos7 ~]# systemctl status firewalld.service
firewalld.service - firewalld - dynamic firewall daemon
   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; enabled)
   Active: active (running) since Wed 2014-11-19 06:47:42 EST; 32min ago
 Main PID: 873 (firewalld)
   CGroup: /system.slice/firewalld.service
           └─873 /usr/bin/python -Es /usr/sbin/firewalld --nofork --nopid

Nov 19 06:47:41 centos7.vlab.local systemd[1]: Starting firewalld - dynamic firewall daemon...
Nov 19 06:47:42 centos7.vlab.local systemd[1]: Started firewalld - dynamic firewall daemon.
[root@centos7 ~]#&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To enable or disable FirewallD again use &lt;code&gt;systemctl&lt;/code&gt; commands.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;systemctl enable firewalld.service
systemctl disable firewalld.service&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;managing-firewall-zones&quot;&gt;Managing firewall zones&lt;/h3&gt;

&lt;p&gt;FirewallD introduces the zones concept, a zone is no more than a way to define the level of trust for a set of connections. A connection definition can only be part of one zone at the same time but zones can be grouped. There is a set of predefined zones:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Public&lt;/strong&gt; - For use in public areas. Only selected incoming
connections are accepted.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Drop&lt;/strong&gt; - Any incoming network packets are dropped, there is
no reply. Only outgoing network connections are possible.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Block&lt;/strong&gt; - Any incoming network connections are rejected with an
icmp-host-prohibited message for IPv4 and icmp6-adm-prohibited
for IPv6. Only network connections initiated within this system
are possible.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;External&lt;/strong&gt; - For use on external networks with masquerading
enabled especially for routers. Only selected incoming connections
are accepted.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DMZ&lt;/strong&gt; - For computers DMZ network, with limited access to the
internal network. Only selected incoming connections are accepted.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Work&lt;/strong&gt; - For use in work areas. Only selected incoming connections
are accepted.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Home&lt;/strong&gt; - For use in home areas. Only selected incoming connections
are accepted.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Trusted&lt;/strong&gt; - All network connections are accepted.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Internal&lt;/strong&gt; - For use on internal networks. Only selected incoming
connections are accepted.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default all interfaces are assigned to the public zone. Each zone is defined in its own XML file stored in &lt;code&gt;/usr/lib/firewalld/zones&lt;/code&gt;. For example the public zone XML file looks like this.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;root@centos7 zones]# cat public.xml
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;zone&amp;gt;
  &amp;lt;short&amp;gt;Public&amp;lt;/short&amp;gt;
  &amp;lt;description&amp;gt;For use in public areas. You do not trust the other computers on networks to not harm your computer. Only selected incoming connections are accepted.&amp;lt;/description&amp;gt;
  &amp;lt;service name=&amp;quot;ssh&amp;quot;/&amp;gt;
  &amp;lt;service name=&amp;quot;dhcpv6-client&amp;quot;/&amp;gt;
&amp;lt;/zone&amp;gt;
[root@centos7 zones]#&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Retrieve a simple list of the existing zones.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[root@centos7 ~]# firewall-cmd --get-zones
block dmz drop external home internal public trusted work
[root@centos7 ~]#&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Get a detailed list of the same zones.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;firewall-cmd --list-all-zones&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Get the default zone.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[root@centos7 ~]# firewall-cmd --get-default-zone
public
[root@centos7 ~]#&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Get the active zones.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[root@centos7 ~]# firewall-cmd --get-active-zones
public
  interfaces: eno16777736 virbr0
[root@centos7 ~]#&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Get the details of a specific zone.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[root@centos7 zones]# firewall-cmd --zone=public --list-all
public (default, active)
  interfaces: eno16777736 virbr0
  sources:
  services: dhcpv6-client ssh
  ports:
  masquerade: no
  forward-ports:
  icmp-blocks:
  rich rules:

[root@centos7 zones]#&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Change the default zone.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;firewall-cmd --set-default-zone=home&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;interfaces-and-sources&quot;&gt;Interfaces and sources&lt;/h4&gt;

&lt;p&gt;Zones can be bound to a network interface and to a specific network addressing or source.&lt;/p&gt;

&lt;p&gt;Assign an interface to a different zone, the first command assigns it temporarily and the second makes it permanently.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;firewall-cmd --zone=home --change-interface=eth0
firewall-cmd --permanent --zone=home --change-interface=eth0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Retrieve the zone an interface is assigned to.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[root@centos7 zones]# firewall-cmd --get-zone-of-interface=eno16777736
public
[root@centos7 zones]#&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Bound the zone &lt;code&gt;work&lt;/code&gt; to a source.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;firewall-cmd --permanent --zone=work --add-source=192.168.100.0/27&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;List the sources assigned to a zone, in this case &lt;code&gt;work&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[root@centos7 ~]# firewall-cmd --permanent --zone=work --list-sources
172.16.10.0/24 192.168.100.0/27
[root@centos7 ~]#&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;services&quot;&gt;Services&lt;/h4&gt;

&lt;p&gt;FirewallD can assign services permanently to a zone, for example to
assign &lt;code&gt;http&lt;/code&gt; service to the &lt;code&gt;dmz&lt;/code&gt; zone. A service can be also assigned
to multiple zones.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[root@centos7 ~]# firewall-cmd --permanent --zone=dmz --add-service=http
success
[root@centos7 ~]# firewall-cmd --reload
success
[root@centos7 ~]#&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;List the services assigned to a given zone.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[root@centos7 ~]# firewall-cmd --list-services --zone=dmz
http ssh
[root@centos7 ~]#&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;other-operations&quot;&gt;Other operations&lt;/h3&gt;

&lt;p&gt;Besides of Zones, interfaces and Services management FirewallD like other firewalls can perform several network related operations like masquerading, set direct rules and manage ports.&lt;/p&gt;

&lt;h4 id=&quot;masquerading-and-port-forwading&quot;&gt;Masquerading and port forwading&lt;/h4&gt;

&lt;p&gt;Add masquerading to a zone.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;firewall-cmd --zone=external --add-masquerade&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Query if masquerading is enabled in a zone.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[root@centos7 ~]# firewall-cmd --zone=external --query-masquerade
yes
[root@centos7 ~]#&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can also set port redirection. For example to forward traffic originally intended for port &lt;code&gt;80/tcp&lt;/code&gt; to port &lt;code&gt;8080/tcp&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;firewall-cmd --zone=external --add-forward-port=port=80:proto=tcp:toport=8080&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A destination address can also bee added to the above command.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;firewall-cmd --zone=external --add-forward-port=port=80:proto=tcp:toport=8080:toaddr=172.16.10.21&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;set-direct-rules&quot;&gt;Set direct rules&lt;/h4&gt;

&lt;p&gt;Create a firewall rule for &lt;code&gt;8080/tcp&lt;/code&gt; port.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;firewall-cmd --direct --add-rule ipv4 filter INPUT -p tcp -m state --state NEW -m tcp --dport 8080 -j ACCEPT&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;port-management&quot;&gt;Port management&lt;/h4&gt;

&lt;p&gt;Allow a port temporary in a zone.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;firewall-cmd --zone=dmz --add-port=8080/tcp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Hopefully you found the post useful to start working with FirewallD. Comments are welcome.
&lt;br /&gt;
&lt;br /&gt;
Juanma.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/linux/red%20hat/security/sysadmin/firewalld-quickstart-guide/&quot;&gt;FirewallD quickstart guide&lt;/a&gt; was originally published by Juan Manuel Rey at &lt;a href=&quot;&quot;&gt;Juanma's Blog&lt;/a&gt; on April 08, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[VMware Integrated #OpenStack is GA!]]></title>
  <link rel="alternate" type="text/html" href="/openstack/vmware/vmware-integrated-openstack-is-ga/" />
  <id>/openstack/vmware/vmware-integrated-openstack-is-ga</id>
  <published>2015-03-16T14:30:58+01:00</published>
  <updated>2015-03-16T14:30:58+01:00</updated>
  <author>
    <name></name>
    <uri></uri>
    
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/03/teamopenstackvmware.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/teamopenstackvmware.png?w=300&quot; alt=&quot;Team+OpenStack+@+VMware&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;http://www.vmware.com/products/openstack/&quot;&gt;&lt;strong&gt;VMware
Integrated OpenStack&lt;/strong&gt;&lt;/a&gt; was
made available for customers last Thursday. It is a exciting time to be
part of VMware.&lt;/p&gt;

&lt;p&gt;Coincidentally with this announcement I have updated my original post
about &lt;a href=&quot;https://jreypo.wordpress.com/2015/02/02/a-first-look-into-vmware-integrated-openstack-vio/&quot; title=&quot;A first look into VMware Integrated #OpenStack (VIO)&quot;&gt;VIO
installation&lt;/a&gt;
with new screenshots and information from the GA version of VIO and this
post has been also published in our official &lt;a href=&quot;http://blogs.vmware.com/openstack/2015/03/16/vmware-integrated-openstack-first-look/&quot;&gt;&lt;strong&gt;VMware OpenStack
Blog&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also if you want to quickly experience VMware and OpenStack all together
there is a new &lt;a href=&quot;http://labs.hol.vmware.com/HOL/catalogs/catalog/&quot;&gt;Hands On
Lab&lt;/a&gt; available about
VIO, the name is &lt;strong&gt;HOL-SDC-1420 VMware Integrated OpenStack and NSX&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Happy Stacking!&lt;/p&gt;

&lt;p&gt;Juanma.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/openstack/vmware/vmware-integrated-openstack-is-ga/&quot;&gt;VMware Integrated #OpenStack is GA!&lt;/a&gt; was originally published by Juan Manuel Rey at &lt;a href=&quot;&quot;&gt;Juanma's Blog&lt;/a&gt; on March 16, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[A first look into VMware Integrated #OpenStack (VIO)]]></title>
  <link rel="alternate" type="text/html" href="/openstack/vmware/a-first-look-into-vmware-integrated-openstack-vio/" />
  <id>/openstack/vmware/a-first-look-into-vmware-integrated-openstack-vio</id>
  <published>2015-02-02T22:12:16+01:00</published>
  <updated>2015-02-02T22:12:16+01:00</updated>
  <author>
    <name></name>
    <uri></uri>
    
  </author>
  <content type="html">
    &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.vmware.com/products/openstack&quot;&gt;VMware Integrated
OpenStack&lt;/a&gt;,&lt;/strong&gt; or VIO, was
announced during last year VMworld in San Francisco and has been finally
released today by VMware.&lt;/p&gt;

&lt;p&gt;For me this is a very special release because I have been one of the
lucky internal adopters and beta testers of VIO. I have spent many hours
working with several VIO builds and trying to help our incredible
engineering team. This is in my opinion a really solid and well designed
product and will be a game changer in the OpenStack world. Honestly I
cannot be more excited :)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/02/image01.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/image01.png?w=580&quot; alt=&quot;IMAGE01&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;VIO is basically a VMware supported OpenStack distribution prepared to
run on top of an existing VMware infrastructure. VMware Integrated
OpenStack will empower any VMware Administrator to easily deliver and
operate an Enterprise production grade OpenStack cloud on VMware
components. This means that you will be able at to take advantage of all
VMware vSphere great features like HA, DRS or VSAN for your OpenStack
cloud and also extend and integrate it with other VMware management
components like &lt;a href=&quot;http://www.vmware.com/ap/products/vrealize-operations&quot;&gt;vRealize
Operations&lt;/a&gt; and
&lt;a href=&quot;http://www.vmware.com/products/vrealize-log-insight&quot;&gt;vRealize Log
Insight&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;vio-components&quot;&gt;VIO components&lt;/h2&gt;

&lt;p&gt;VIO is made by two main building blocks, first the VIO Manager and
second OpenStack components. VIO is packaged as an OVA file that
contains the VIO Manager server and an Ubuntu Linux virtual machine to
be used as the template for the different OpenStack components.&lt;/p&gt;

&lt;p&gt;The OpenStack services in VIO are deployed as a distributed highly
available solution formed by the following components:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OpenStack controllers. Two virtual machines running Horizon
Dashboard, Nova (API, scheduler and VNC) services, Keystone, Heat,
Glance, and Cinder services in an active-active cluster.&lt;/li&gt;
  &lt;li&gt;Memcached cluster.&lt;/li&gt;
  &lt;li&gt;RabbitMQ cluster, for messaging services used by all
OpenStack services.&lt;/li&gt;
  &lt;li&gt;Load Balancer virtual machines, an active-active cluster managing
the internal and public virtual IP addresses.&lt;/li&gt;
  &lt;li&gt;Nova Compute machine, running the n-cpu service.&lt;/li&gt;
  &lt;li&gt;Database cluster. A three node MariaDB Galera cluster that stores
the OpenStack metadata.&lt;/li&gt;
  &lt;li&gt;Object Storage machine, running Swift services.&lt;/li&gt;
  &lt;li&gt;DHCP nodes. These nodes are only required if NSX is not selected as
provider for Neutron.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;installation-requirements&quot;&gt;Installation requirements&lt;/h2&gt;

&lt;p&gt;To be able to successfully deploy VIO you will need at least the
following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;One management cluster with two to three hosts, depending on the
hardware resources of the hosts.&lt;/li&gt;
  &lt;li&gt;One Edge cluster. As with any NSX for vSphere deployment it is
recommended to deploy a separate cluster to run all Edge
gateway instances.&lt;/li&gt;
  &lt;li&gt;One compute cluster to be used by Nova to run instances. One ESXi
host will be enough but again that will depend on how much resources
are available and what kind of workloads you want to run.&lt;/li&gt;
  &lt;li&gt;Management network with at least 15 static IP addresses available.&lt;/li&gt;
  &lt;li&gt;External network with a minimum of two IP addresses available. This
is the network where Horizon portal will be exposed and that will be
used by the tenants to access OpenStack APIs and services.&lt;/li&gt;
  &lt;li&gt;Data network, only needed if NSX is going to be used. The different
tenant logical network will be created on top of this, the
management network can be used but it is recommended to have a
separate network.&lt;/li&gt;
  &lt;li&gt;NSX for vSphere, 6.1.2 at minimum. It has to be setup prior to VIO
deployment if NSX plugin is going to be used with Neutron.&lt;/li&gt;
  &lt;li&gt;Distributed Port Group. In case of choosing DVS-based networking a
vSphere port-group tagged with VLAN 4095 must be setup. This port
group will be used as the data network.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The hardware requirements are around 56 vCPU, 192GB of memory and 605GB
of storage. To that you have to add NSX for vSphere required resources
for the NSX Manager, the three NSX Controllers and the NSX Edge pool, if
NSX is going to be used.&lt;/p&gt;

&lt;p&gt;Anyway in a future post I will review in detail all the pre-requisites
and their setup process for VIO, and the integration between NSX-v and
Neutron.&lt;/p&gt;

&lt;h2 id=&quot;vio-installation&quot;&gt;VIO Installation&lt;/h2&gt;

&lt;p&gt;Now that we have seen a bit of VIO I am going to show how to perform an
installation.&lt;/p&gt;

&lt;h3 id=&quot;deploying-vio-manager&quot;&gt;Deploying VIO Manager&lt;/h3&gt;

&lt;p&gt;The first step is to deploy VIO OVA on our management cluster. From
vSphere Web Client launch the &lt;em&gt;Deploy OVF Template&lt;/em&gt; wizard and enter the
URL to the VIO OVA file.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/02/image02.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/image02.png?w=580&quot; alt=&quot;IMAGE02&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Accept the EULA and proceed to configure the template. First as with any
OVA template enter the name and the folder,&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/02/image03.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/image03.png?w=580&quot; alt=&quot;IMAGE03&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select the datastore and the storage format.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/02/image04.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/image04.png?w=580&quot; alt=&quot;IMAGE04&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select the network for VIO Manager.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/02/image05.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/image05.png?w=580&quot; alt=&quot;IMAGE05&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we will customize the template, this includes entering the VIO
Manager server networking settings, NTP, SSO lookup service URL and
Syslog server.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/02/screen-shot-2015-01-31-at-00-32-27.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2015-01-31-at-00-32-27.png?w=580&quot; alt=&quot;Screen Shot 2015-01-31 at
00.32.27&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go through the next two screens, click finish and start the deployment.
Once it is finished you will have a new vApp with the two virtual
machines. Our next step is to register the management server with
vCenter, power on the OMS vApp and when the management server is fully
started logout of vSphere Web Client. Log in back to vSphere Web Client,
you will notice a new icon in the Home page.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/02/screen-shot-2015-02-01-at-02-34-35.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2015-02-01-at-02-34-35.png?w=580&quot; alt=&quot;Screen Shot 2015-02-01 at
02.34.35&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Access the VIO plugin interface and in the Summary you should see that
VIO Manager has automatically registered itself with vCenter.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/02/image08.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/image08.png?w=580&quot; alt=&quot;IMAGE08&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From this screen you can also change the VIO Manager server in case you
need to re-deploy a new one. To do so select the management server in
the pop-up and click OK.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/02/screen-shot-2015-01-31-at-17-24-49.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2015-01-31-at-17-24-49.png?w=580&quot; alt=&quot;Screen Shot 2015-01-31 at
17.24.49&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Accept the SSL certificate to finish the procedure.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2014/08/screen-shot-2014-08-23-at-01-41-07.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-08-23-at-01-41-07.png?w=580&quot; alt=&quot;Screen Shot 2014-08-23 at
01.41.07&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;VIO Manager Server will now be displayed as connected in the &lt;em&gt;Summary&lt;/em&gt;
tab.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/02/image11.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/image11.png&quot; alt=&quot;IMAGE11&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;deploying-openstack&quot;&gt;Deploying OpenStack&lt;/h3&gt;

&lt;p&gt;With VIO Manager running and connected to our vCenter it is time now to
deploy OpenStack. Proceed to the &lt;em&gt;Getting Started&lt;/em&gt; tab and click
&lt;strong&gt;Deploy OpenStack&lt;/strong&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/02/image12.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/image12.png?w=580&quot; alt=&quot;IMAGE12&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A new wizard will be launched. In the first screen we must select the
deployment type. VIO allows to deploy a new OpenStack installation or
deploy from a previously saved template file.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/02/image13.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/image13.png?w=580&quot; alt=&quot;IMAGE13&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Provide the vCenter administrative credentials.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/02/image14.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/image14.png?w=580&quot; alt=&quot;IMAGE14&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select the management cluster where we are going to deploy VIO.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/02/image15.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/image15.png?w=580&quot; alt=&quot;IMAGE15&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next you need to configure the Management and External networks. Select
the appropriate vSphere port-groups for each network and fill in the
network ranges, gateway, netmask and DNS server fields.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/02/image16.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/image16.png?w=580&quot; alt=&quot;IMAGE16&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter the values for the load balancer configuration:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Public Virtual IP address&lt;/li&gt;
  &lt;li&gt;Public Hostname, this hostname must resolve to the Public
IP address.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/02/image17.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/image17.png?w=580&quot; alt=&quot;IMAGE17&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add a cluster to be used for Nova.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/02/image18.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/image18.png?w=580&quot; alt=&quot;IMAGE18&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add the datastores to be used by Nova to store the different instances.
If you have a &lt;a href=&quot;http://www.vmware.com/products/virtual-san&quot;&gt;VSAN&lt;/a&gt;
datastore keep in mind that to be able to use it with Nova the images
stored in Glance have to be
&lt;a href=&quot;https://blueprints.launchpad.net/nova/+spec/vmware-vsan-support&quot;&gt;streamOptimzed&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/02/image19.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/image19.png?w=580&quot; alt=&quot;IMAGE19&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select the datastore to be used by Glance image service.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/02/image20.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/image20.png?w=580&quot; alt=&quot;IMAGE20&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Configure Neutron networking. For Neutron there are two different
options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DVS-based networking&lt;/li&gt;
  &lt;li&gt;NSX networking&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For DVS simply select the Virtual Distributed Switch where you created
the port-group for the data network with the VLAN 4095 configured.&lt;/p&gt;

&lt;p&gt;For NSX deployment you must enter:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NSX Manager IP address.&lt;/li&gt;
  &lt;li&gt;NSX Manager administrative username.&lt;/li&gt;
  &lt;li&gt;NSX Manager administrative user password.&lt;/li&gt;
  &lt;li&gt;VDN Scope. Basically the Transport Zone in NSX-v to be used as
transport layer for data traffic.&lt;/li&gt;
  &lt;li&gt;Edge Cluster. A vSphere cluster to deploy the NSX Edge instances.&lt;/li&gt;
  &lt;li&gt;Virtual Distributed Switch for NSX networking.&lt;/li&gt;
  &lt;li&gt;External Network. This a port group to be used as external network
by instances in OpenStack via a virtual router. This port group
should be accessible from compute, management and edge clusters.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/02/image21.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/image21.png?w=580&quot; alt=&quot;IMAGE21&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;During the Neutron configuration the wizard will connect to the NSX
Manager with the provided credentials and will ask to accept the SSL
certificate.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/02/image22.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/image22.png?w=580&quot; alt=&quot;IMAGE22&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the next screen the wizard will ask for the OpenStack admin user,
password and project. Also you can select the Keystone type option:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Database&lt;/li&gt;
  &lt;li&gt;Active Directory as LDAP Server.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/02/image23.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/image23.png?w=580&quot; alt=&quot;IMAGE23&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally set the syslog server, it is not mandatory to set this value but
it is highly recommended.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/02/image24.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/image24.png?w=580&quot; alt=&quot;IMAGE24&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Review the configuration and click &lt;strong&gt;Finish&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/02/screen-shot-2015-01-31-at-20-43-54.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2015-01-31-at-20-43-54.png?w=580&quot; alt=&quot;Screen Shot 2015-01-31 at
20.43.54&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Review the configuration and click &lt;strong&gt;Finish&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The deployment will take some time, depending on your storage backend.
In my testing lab took around one hour, but it is a nested environment
running on NFS so you can expect much better times deploying in a real
world setup. When it is finished you can review the different components
of VIO with vSphere Web Client in &lt;em&gt;VMs and Templates&lt;/em&gt;, there would be a
new folder structure containing all VIO virtual machines.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/02/image25.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/image25.png&quot; alt=&quot;IMAGE25&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;validate-your-vio-installation&quot;&gt; Validate your VIO installation&lt;/h2&gt;

&lt;p&gt;In your favorite browser open an HTTPS session against the public
hostname or virtual IP address configured during VIO installation. The
Horizon portal login page will display.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/02/screen-shot-2015-02-01-at-22-50-41.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2015-02-01-at-22-50-41.png?w=580&quot; alt=&quot;Screen Shot 2015-02-01 at
22.50.41&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter the admin credentials and OpenStack admin Overview page will show
up. The access the &lt;em&gt;Hypervisors&lt;/em&gt; area and check that the selected
cluster for Nova appears there.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/02/screen-shot-2015-02-01-at-22-53-19.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2015-02-01-at-22-53-19.png?w=580&quot; alt=&quot;Screen Shot 2015-02-01 at
22.53.19&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point VIO is setup and you can start to work in Horizon or using
the CLI as with any other OpenStack distribution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Have fun and happy stacking!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Juanma.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/openstack/vmware/a-first-look-into-vmware-integrated-openstack-vio/&quot;&gt;A first look into VMware Integrated #OpenStack (VIO)&lt;/a&gt; was originally published by Juan Manuel Rey at &lt;a href=&quot;&quot;&gt;Juanma's Blog&lt;/a&gt; on February 02, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[How to install Cockpit on CentOS 7]]></title>
  <link rel="alternate" type="text/html" href="/linux/red%20hat/sysadmin/how-to-install-cockpit-on-centos-7/" />
  <id>/linux/red%20hat/sysadmin/how-to-install-cockpit-on-centos-7</id>
  <published>2015-01-09T12:35:18+01:00</published>
  <updated>2015-01-09T12:35:18+01:00</updated>
  <author>
    <name></name>
    <uri></uri>
    
  </author>
  <content type="html">
    &lt;p&gt;Being used to have &lt;strong&gt;&lt;a href=&quot;http://cockpit-project.org/&quot;&gt;Cockpit&lt;/a&gt;&lt;/strong&gt; in my
Fedora 21 Server VMs I decided that having it also on my
&lt;a href=&quot;http://centos.org/&quot;&gt;&lt;strong&gt;CentOS&lt;/strong&gt;&lt;/a&gt; machines would be awesome,
unfortunately I quickly found that Cockpit was not available in CentOS
repositories. Of course I knew that Cockpit comes installed and enabled
by default in CentOS 7 Atomic host image so I figured out that those
packages had to be hidden in some Atomic related repo.&lt;/p&gt;

&lt;p&gt;After looking a bit I finally found in GitHub the
&lt;a href=&quot;https://github.com/CentOS/sig-atomic-buildscripts&quot;&gt;sig-atomic-buildscripts&lt;/a&gt;
repository that belongs to CentOS Project. This repository contains
several scripts and files intended to build your own CentOS Atomic host
including &lt;code&gt;virt7-testing.repo&lt;/code&gt;, the Yum repository file needed for
Cockpit.&lt;/p&gt;

&lt;p&gt;Clone the GutHub repository.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/baude/sig-atomic-buildscripts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Copy &lt;code&gt;virt7-testing.repo&lt;/code&gt; file to &lt;code&gt;/etc/yum.repos.d&lt;/code&gt; and install
Cockpit.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum install cockpit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enable Cockpit service.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@webtest ~]# systemctl enable cockpit.socket
ln -s &#39;/usr/lib/systemd/system/cockpit.socket&#39; &#39;/etc/systemd/system/sockets.target.wants/cockpit.socket&#39;
[root@webtest ~]#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add Cockpit to the list of trusted services in FirewallD.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@webtest ~]# firewall-cmd --permanent --zone=public --add-service=cockpit
success
[root@webtest ~]#
[root@webtest ~]# firewall-cmd --reload
success
[root@webtest ~]#
[root@webtest ~]# firewall-cmd --list-services
cockpit dhcpv6-client ssh
[root@webtest ~]#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Start Cockpit socket.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;systemctl start cockpit.socket
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Do no try to access Cockpit yet, there is an
&lt;a href=&quot;https://github.com/cockpit-project/cockpit/issues/1581&quot;&gt;issue&lt;/a&gt; about
running Cockpit on stock CentOS/RHEL 7. To be able to start it we need
first to modify the service file to disable SSL.Edit file
&lt;code&gt;/usr/lib/systemd/system/cockpit.service&lt;/code&gt; and modify &lt;code&gt;ExecStart&lt;/code&gt; line to
look like this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ExecStart=/usr/libexec/cockpit-ws --no-tls
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I know this procedure will invalidate Cockpit for a production
environment in RHEL7 at least for now but this is for my lab environment
and I can live with it.&lt;/p&gt;

&lt;p&gt;Reload &lt;code&gt;systemd&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;systemctl daemon-reload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Restart Cockpit.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;systemctl restart cockpit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Access Cockpit web interface, login as root and have fun :-)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/01/screen-shot-2015-01-09-at-01-57-51.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2015-01-09-at-01-57-51.png?w=580&quot; alt=&quot;Screen Shot 2015-01-09 at
01.57.51&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Juanma.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/linux/red%20hat/sysadmin/how-to-install-cockpit-on-centos-7/&quot;&gt;How to install Cockpit on CentOS 7&lt;/a&gt; was originally published by Juan Manuel Rey at &lt;a href=&quot;&quot;&gt;Juanma's Blog&lt;/a&gt; on January 09, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Managing your Fedora Server with Cockpit]]></title>
  <link rel="alternate" type="text/html" href="/devops/linux/red%20hat/sysadmin/managing-your-fedora-server-with-cockpit/" />
  <id>/devops/linux/red%20hat/sysadmin/managing-your-fedora-server-with-cockpit</id>
  <published>2015-01-08T16:50:27+01:00</published>
  <updated>2015-01-08T16:50:27+01:00</updated>
  <author>
    <name></name>
    <uri></uri>
    
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2014/12/fedora_infinity_140x140.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/fedora_infinity_140x140.png&quot; alt=&quot;fedora_infinity_140x140&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://getfedora.org/&quot;&gt;Cockpit&lt;/a&gt;
is a new web based server manager to administer Linux server, it will
provide the system administrators with a user friendly interface to
manage their Linux servers, it includes multiserver managing capacity
and more importantly it will create no interference or disconnection
between the tasks done from the web and from the command line. This last
feature is specially useful&lt;/p&gt;

&lt;p&gt;By default Cockpit, stable version, comes installed and enabled in
&lt;a href=&quot;https://getfedora.org/en/server/&quot;&gt;Fedora 21 Server&lt;/a&gt;. It also can be
found in CentOS/RHEL 7 Atomic, Fedora 21 Atomic and Fedora 21 Cloud, and
there are plans in the near future to support &lt;a href=&quot;https://www.archlinux.org/&quot;&gt;Arch
Linux&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Lets review now some of the features of Cockpit, as said before multiple
servers can be managed from the same Cockpit instance.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2014/12/screen-shot-2014-12-31-at-19-26-00.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-12-31-at-19-26-00.png?w=580&quot; alt=&quot;Screen Shot 2014-12-31 at
19.26.00&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you access one of managed nodes it will present general overview of
the server with real-time charts of CPU, Memory, Disk I/O and Network
Traffic.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2014/12/screen-shot-2014-12-31-at-19-37-53.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-12-31-at-19-37-53.png?w=580&quot; alt=&quot;Screen Shot 2014-12-31 at
19.37.53&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the left pane there are a series of actionable items that will give
you access to the different subsystems of the node like Networking,
Storage, User Accounts and even the status of the Docker containers
running on the server, if the Docker service has been enabled.&lt;/p&gt;

&lt;p&gt;System services view.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/01/screen-shot-2014-12-31-at-19-52-53.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-12-31-at-19-52-53.png?w=580&quot; alt=&quot;Screen Shot 2014-12-31 at
19.52.53&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When a process is selected Cockpit will display its details.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/01/screen-shot-2015-01-08-at-12-11-27.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2015-01-08-at-12-11-27.png?w=580&quot; alt=&quot;Screen Shot 2015-01-08 at
12.11.27&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Networking area displays traffic for the selected interface, the journal
of the networking system and even allows you to create a new bond
interface, a new bridge or add a new VLAN tag to the interface.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/01/screen-shot-2014-12-31-at-19-53-18.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-12-31-at-19-53-18.png?w=580&quot; alt=&quot;Screen Shot 2014-12-31 at
19.53.18&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Storage view will display similar info for the disks, and will
display detailed information for each of them, review the LVM
configuration of the server and perform different storage related
operations.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/01/screen-shot-2014-12-31-at-19-53-45.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-12-31-at-19-53-45.png?w=580&quot; alt=&quot;Screen Shot 2014-12-31 at
19.53.45&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Journal view lets you review &lt;code&gt;systemd&lt;/code&gt; journal. You can go back seven
days into the log and filter on the type of messages.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2015/01/screen-shot-2014-12-31-at-19-54-29.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-12-31-at-19-54-29.png?w=580&quot; alt=&quot;Screen Shot 2014-12-31 at
19.54.29&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After using Cockpit for some time in my lab I can say that I genuinely
love it, the interface is pretty fast, it uses systemd for everything
and it does not interface with my console-based admin habits, on the
contrary is a great complement to them.&lt;/p&gt;

&lt;p&gt;Juanma.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/devops/linux/red%20hat/sysadmin/managing-your-fedora-server-with-cockpit/&quot;&gt;Managing your Fedora Server with Cockpit&lt;/a&gt; was originally published by Juan Manuel Rey at &lt;a href=&quot;&quot;&gt;Juanma's Blog&lt;/a&gt; on January 08, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Open vSwitch and NSX vSwitch command equivalencies]]></title>
  <link rel="alternate" type="text/html" href="/networking/sysadmin/vmware/open-vswitch-and-nsx-vswitch-command-equivalencies/" />
  <id>/networking/sysadmin/vmware/open-vswitch-and-nsx-vswitch-command-equivalencies</id>
  <published>2014-12-16T16:22:32+01:00</published>
  <updated>2014-12-16T16:22:32+01:00</updated>
  <author>
    <name></name>
    <uri></uri>
    
  </author>
  <content type="html">
    &lt;p&gt;A question I’ve heard a few times, what are the command equivalencies
between a standard &lt;strong&gt;Open vSwitch&lt;/strong&gt;, running inside a Linux box, and the
&lt;strong&gt;NSX vSwitch&lt;/strong&gt; running inside ESXi? I have written this post to clarify
this a bit.&lt;/p&gt;

&lt;p&gt;There are four commands in NSX CLI that have equivalencies in the OVS
world:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;strong&gt;NVS Command&lt;/strong&gt;&lt;/th&gt;
      &lt;th&gt;&lt;strong&gt;OVS Command&lt;/strong&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;nsx-dbctl&lt;/td&gt;
      &lt;td&gt;ovs-vsctl&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;nsx-dpctl&lt;/td&gt;
      &lt;td&gt;ovs-dpctl&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;nsx-appctl&lt;/td&gt;
      &lt;td&gt;ovs-appctl&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;nsx-flowctl&lt;/td&gt;
      &lt;td&gt;ovs-flowctl&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;nsx-dbctl&quot;&gt;nsx-dbctl&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;ovs-dbctl&lt;/code&gt; command, like its OVS equivalent &lt;code&gt;ovs-vsctl&lt;/code&gt;, Sub-commands
are the same, and for example &lt;code&gt;nsx-dbctl show&lt;/code&gt; will produce a similar
output to &lt;code&gt;ovs-vsctl show&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~ # nsx-dbctl show
ec451c1a-0258-423a-b406-dec83af4b241
    Manager &quot;ssl:192.168.110.201:6632&quot;
        is_connected: true
    Bridge &quot;br-vmnic1&quot;
        fail_mode: standalone
        Port &quot;vmk3&quot;
            Interface &quot;vmk3&quot;
        Port &quot;vmnic1&quot;
            Interface &quot;vmnic1&quot;
    Bridge br-int
        Controller &quot;ssl:192.168.110.201:6633&quot;
            is_connected: true
        Controller &quot;unix:ovs-l3d.mgmt&quot;
            is_connected: true
        fail_mode: secure
        Port &quot;vNic.3000004&quot;
            Interface &quot;vNic.3000004&quot;
        Port &quot;vNic.3000006&quot;
            Interface &quot;vNic.3000006&quot;
        Port &quot;vNic.3000005&quot;
            Interface &quot;vNic.3000005&quot;
    ovs_version: &quot;2.0.2.31704&quot;
~ #
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;nsx-dpctl&quot;&gt;nsx-dpctl&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;nsx-dpctl&lt;/code&gt; command maps to &lt;code&gt;ovs-dpctl&lt;/code&gt; and much like it allow you to
manage Open vSwitch datapaths.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~ # nsx-dpctl show
system@nsx-vswitch:
        lookups: hit:1770781 missed:192476 lost:0
        flows: 14
        port 50331650: vmnic1
        port 50331651: vmk3
        port 50331652: vNic.3000004
        port 50331653: vNic.3000005
        port 50331654: vNic.3000006
~ #
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;nsx-appctl&quot;&gt;nsx-appctl&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;nsx-appctl&lt;/code&gt; will allow the administrator to manage and configure OVS
daemons. It maps to &lt;code&gt;ovs-appctl&lt;/code&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~ # nsx-appctl dpif/show
system@nsx-vswitch: hit:2230477 missed:148652
        flows: cur: 17, avg: 17, max: 33, life span: 1918447ms
        hourly avg: add rate: 66.907/min, del rate: 66.880/min
        daily avg: add rate: 43.476/min, del rate: 43.461/min
        overall avg: add rate: 60.918/min, del rate: 60.909/min
        br-int: hit:142949 missed:8461
                vNic.3000004 1/50331652: (system)
                vNic.3000005 2/50331653: (system)
                vNic.3000006 3/50331654: (system)
        br-vmnic1: hit:2087528 missed:140191
                vmk3 2/50331651: (system)
                vmnic1 1/50331650: (system)
~ #
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;nsx-flowctl&quot;&gt;nsx-flowctl&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;nsx-flowctl&lt;/code&gt; is the equivalent of &lt;code&gt;ovs-flowctl&lt;/code&gt; and will allow you to
manage NSX vSwich flow tables, ports, etc.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~ # nsx-flowctl show br-bond0
OFPT_FEATURES_REPLY (xid=0x3): dpid:0000725d4492c540
n_tables:254, n_buffers:256
capabilities: FLOW_STATS TABLE_STATS PORT_STATS QUEUE_STATS ARP_MATCH_IP
actions: OUTPUT SET_VLAN_VID SET_VLAN_PCP STRIP_VLAN SET_DL_SRC SET_DL_DST SET_NW_SRC SET_NW_DST SET_NW_TOS SET_TP_SRC SET_TP_DST ENQUEUE
 1(vmnic4): addr:00:50:56:01:08:c6
     config:     0
     state:      0
     current:    1GB-FD
     advertised: 10MB-HD 10MB-FD 100MB-HD 100MB-FD 1GB-HD 1GB-FD
     supported:  10MB-HD 10MB-FD 100MB-HD 100MB-FD 1GB-HD 1GB-FD
     speed: 1000 Mbps now, 1000 Mbps max
 2(vmnic5): addr:00:50:56:01:08:c8
     config:     0
     state:      0
     current:    1GB-FD
     advertised: 10MB-HD 10MB-FD 100MB-HD 100MB-FD 1GB-HD 1GB-FD
     supported:  10MB-HD 10MB-FD 100MB-HD 100MB-FD 1GB-HD 1GB-FD
     speed: 1000 Mbps now, 1000 Mbps max
 3(vmk3): addr:00:50:56:66:57:18
     config:     0
     state:      0
     speed: 0 Mbps now, 0 Mbps max
OFPT_GET_CONFIG_REPLY (xid=0x6): frags=normal miss_send_len=0
~ #
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Courteous comments are welcome.&lt;/p&gt;

&lt;p&gt;Juanma.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/networking/sysadmin/vmware/open-vswitch-and-nsx-vswitch-command-equivalencies/&quot;&gt;Open vSwitch and NSX vSwitch command equivalencies&lt;/a&gt; was originally published by Juan Manuel Rey at &lt;a href=&quot;&quot;&gt;Juanma's Blog&lt;/a&gt; on December 16, 2014.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Monitoring NSX Multi-Hypervisor with vRealize Operations Manager]]></title>
  <link rel="alternate" type="text/html" href="/devops/networking/sysadmin/vmware/monitoring-nsx-multi-hypervisor-with-vrealize-operations-manager/" />
  <id>/devops/networking/sysadmin/vmware/monitoring-nsx-multi-hypervisor-with-vrealize-operations-manager</id>
  <published>2014-12-16T02:35:50+01:00</published>
  <updated>2014-12-16T02:35:50+01:00</updated>
  <author>
    <name></name>
    <uri></uri>
    
  </author>
  <content type="html">
    &lt;p&gt;VMware has released a new &lt;strong&gt;vRealize Operations Manager&lt;/strong&gt; management
pack for &lt;strong&gt;NSX Multi-hypervisor&lt;/strong&gt;. This new management pack will allow
vROps to extend its management capabilities into any NSX-MH
infrastructure.&lt;/p&gt;

&lt;p&gt;This management pack provides a great set a features, including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Operational visibility into the different NSX-MH components, from
NSX Manager to Controllers, transport nodes and logical elements of
the network.&lt;/li&gt;
  &lt;li&gt;Search and drill down functionality to help the administrator
monitor the health of the NSX objects.&lt;/li&gt;
  &lt;li&gt;Alerts and root cause problem solving capabilities by detecting
configuration, connectivity and health deficiencies into the
NSX environment.&lt;/li&gt;
  &lt;li&gt;Report templates for NSX Multi-Hypervisor environment.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The management pack requires vRealize Operations Manager 6.0 and can be
downloaded from &lt;a href=&quot;https://solutionexchange.vmware.com/store/products/management-pack-for-nsx-for-multi-hypervisor-1-0#.VI9wfIrF-n0&quot;&gt;VMware Solutions
Exchange&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

&lt;p&gt;To install this management pack go to &lt;strong&gt;Administration&lt;/strong&gt; in the left
pane.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2014/12/screen-shot-2014-12-16-at-01-15-10.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-12-16-at-01-15-10.png&quot; alt=&quot;Screen Shot 2014-12-16 at
01.15.10&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From there go to &lt;strong&gt;Solutions&lt;/strong&gt; and on the right pane click on the plus
sign to add the new management pack.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2014/12/screen-shot-2014-12-16-at-01-15-24.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-12-16-at-01-15-24.png?w=580&quot; alt=&quot;Screen Shot 2014-12-16 at
01.15.24&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Browse for the pack installation file, click &lt;strong&gt;Upload&lt;/strong&gt; and then click
&lt;strong&gt;Next&lt;/strong&gt; when the installation file is uploaded.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2014/12/screen-shot-2014-12-16-at-01-16-27.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-12-16-at-01-16-27.png?w=580&quot; alt=&quot;Screen Shot 2014-12-16 at
01.16.27&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Accept the EULA and proceed to the last screen. Wait until the
management pack is installed and then click &lt;strong&gt;Finish&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2014/12/screen-shot-2014-12-16-at-01-19-10.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-12-16-at-01-19-10.png?w=580&quot; alt=&quot;Screen Shot 2014-12-16 at
01.19.10&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;configure-the-adapter-instance&quot;&gt;Configure the adapter instance&lt;/h3&gt;

&lt;p&gt;The first task is to create the credentials for the solution. Access
&lt;strong&gt;Administration -&amp;gt; Credentials&lt;/strong&gt; and create a new credential for the
&lt;strong&gt;NSX-MH Adapter&lt;/strong&gt;.It has to include the administration credentials for
the NSX Controller, NSX Manager and vCenter Server.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2014/12/screen-shot-2014-12-16-at-02-19-17.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-12-16-at-02-19-17.png&quot; alt=&quot;Screen Shot 2014-12-16 at
02.19.17&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next access &lt;strong&gt;Administration -&amp;gt; Solutions&lt;/strong&gt;, select the NSX-MH pack
and click on the gear icon.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2014/12/configure-nsx-mh.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/configure-nsx-mh.png?w=580&quot; alt=&quot;configure-nsx-mh&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the pop-up window enter the IP address or the FQDN for:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NSX Controller&lt;/li&gt;
  &lt;li&gt;NSX Manager&lt;/li&gt;
  &lt;li&gt;vCenter Server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Only the first NSX Controller is needed.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2014/12/configure-nsx-mh_2.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/configure-nsx-mh_2.png?w=580&quot; alt=&quot;configure-nsx-mh_2&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Test the connection, accept the certificates for the different
components and click Save Settings. After this the adapter is configured
and will start collecting data, it will take a some time until it
displays data, depending on the size of the NSX environment, to have a
full collection of data.&lt;/p&gt;

&lt;h3 id=&quot;nsx-mh-dashboards&quot;&gt;NSX-MH dashboards&lt;/h3&gt;

&lt;p&gt;Out of the box the management pack comes with three dashboards.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;NSX-MH Main&lt;/strong&gt;: It provides an overview of the health of the
different network objects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2014/12/screen-shot-2014-12-16-at-01-29-26.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-12-16-at-01-29-26.png?w=580&quot; alt=&quot;Screen Shot 2014-12-16 at
01.29.26&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;NSX-MH Topology&lt;/strong&gt;: Provides details about the topology of a
selected object, how it connects in the networks and a view of the
related alerts and metrics.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2014/12/screen-shot-2014-12-15-at-02-30-37.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-12-15-at-02-30-37.png?w=580&quot; alt=&quot;Screen Shot 2014-12-15 at
02.30.37&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;NSX-MH Object Path&lt;/strong&gt;: This dashboard enables the administrator to
visually depict a the path between two selected objects and verify
how they are connected between each other and other objects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2014/12/screen-shot-2014-12-16-at-01-32-14.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-12-16-at-01-32-14.png?w=580&quot; alt=&quot;Screen Shot 2014-12-16 at
01.32.14&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Juanma.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/devops/networking/sysadmin/vmware/monitoring-nsx-multi-hypervisor-with-vrealize-operations-manager/&quot;&gt;Monitoring NSX Multi-Hypervisor with vRealize Operations Manager&lt;/a&gt; was originally published by Juan Manuel Rey at &lt;a href=&quot;&quot;&gt;Juanma's Blog&lt;/a&gt; on December 16, 2014.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[How to setup ESXi for NSX]]></title>
  <link rel="alternate" type="text/html" href="/networking/sysadmin/vmware/how-to-setup-esxi-for-nsx/" />
  <id>/networking/sysadmin/vmware/how-to-setup-esxi-for-nsx</id>
  <published>2014-07-14T16:05:48+02:00</published>
  <updated>2014-07-14T16:05:48+02:00</updated>
  <author>
    <name></name>
    <uri></uri>
    
  </author>
  <content type="html">
    &lt;p&gt;In the series of posts about OpenStack and KVM we saw how to add a KVM
node to NSX for multi-hypervisor environments as a transport node. In
this post we will discuss how to perform the same procedure for an ESXi
host.&lt;/p&gt;

&lt;h3 id=&quot;nsx-vswitch-installation&quot;&gt;NSX vSwitch installation&lt;/h3&gt;

&lt;p&gt;Before proceeding with the installation keep in mind that NSX vSwitch
can run on an ESXi host simultaneously only with VMware Standard Switch,
distributed switches are not supported.&lt;/p&gt;

&lt;p&gt;Install the NSX vSwitch &lt;code&gt;vib&lt;/code&gt; file using &lt;code&gt;esxcli&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~ # esxcli software vib install --no-sig-check -v /tmp/vmware-nsxvswitch-2.1.3-35984-prod2013-stage-release.vib
Installation Result
   Message: Operation finished successfully.
   Reboot Required: false
   VIBs Installed: VMware_bootbank_vmware-nsxvswitch_2.1.3-35984
   VIBs Removed:
   VIBs Skipped:
~ #
~ # esxcli software vib list | grep nsx
vmware-nsxvswitch              2.1.3-35984                           VMware  VMwareCertified   2014-07-13
~ #
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check that the a new virtual switch has been created on the host, don’t
use &lt;code&gt;esxcli&lt;/code&gt; but the good old &lt;code&gt;esxcfg-vswitch&lt;/code&gt; command because for now
there is no namespace available in &lt;code&gt;esxcli&lt;/code&gt; for NSX vSwitch.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~ # esxcfg-vswitch -l
Switch Name      Num Ports   Used Ports  Configured Ports  MTU     Uplinks
vSwitch0         1536        7           128               1500    vmnic0,vmnic1

  PortGroup Name        VLAN ID  Used Ports  Uplinks
  vMotion               0        1           vmnic0,vmnic1
  Management Network    0        1           vmnic0,vmnic1

Switch Name      Num Ports   Used Ports  Configured Ports  MTU     Uplinks
vSwitch1         1536        6           128               1500    vmnic2,vmnic3

  PortGroup Name        VLAN ID  Used Ports  Uplinks
  vsan                  0        1           vmnic2,vmnic3

Switch Name      Num Ports   Used Ports  Uplinks
nsx-vswitch      1536        1

~ #
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;nsx-vswitch-configuration&quot;&gt;NSX vSwitch configuration&lt;/h3&gt;

&lt;p&gt;With NSX vSwitch installed proceed to the conifguration. First connect
an uplink to the switch, this will create an NVS bridge which is the
equivalent of an OVS bridge in Open vSwitch.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nsxcli uplink/connect vmnic4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Set an IP address for the uplink, this IP address will be used later to
create the transport tunneling endpoint when we connect the ESXi as a
transport node to NSX. You can also specify the VLAN tag by appending
&lt;code&gt;vlan=&amp;lt;vlan_id&amp;gt;&lt;/code&gt; as an additional parameter to the command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nsxcli uplink/set-ip vmnic4 192.168.110.123 255.255.255.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Validate that the bridge is correctly configured. Use &lt;code&gt;nsxcli port/show&lt;/code&gt;
to verify the bridge and &lt;code&gt;nsxcli uplink/show&lt;/code&gt; for the uplink.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~ # nsxcli port/show
br-int:
-------

br-vmnic4:
----------
vmnic4
vmk3

~ #
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the &lt;code&gt;uplink/show&lt;/code&gt; output look for an entry like the one below.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;==============================
vmnic4:
MAC       : 00:50:56:01:08:ca
Link      : Up
MTU       : 1500
IP config :
------------------------------
VMK intf  : vmk3
MAC addr  : 00:50:56:6b:ca:dd
Services  : NSX-Tunneling
VLAN      : 0
IP        : 192.168.110.123(Static)
Mask      : 255.255.255.0(Static)
..............................
------------------------------
Connection : NVS (uplink0)
Configured as standalone interface
==============================
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also check the status of the vmkernel interface with &lt;code&gt;esxcli&lt;/code&gt;
and with &lt;code&gt;nsxcli&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; ~ # esxcli network ip interface ipv4 get -i vmk3
Name  IPv4 Address     IPv4 Netmask   IPv4 Broadcast   Address Type  DHCP DNS
----  ---------------  -------------  ---------------  ------------  --------
vmk3  192.168.110.123  255.255.255.0  192.168.110.255  STATIC           false
~ #
~ # nsxcli vmknic/show vmk3
vmk3:
MAC addr  : 00:50:56:6b:ca:dd
Services  : NSX-Tunneling
VLAN      : 0
IP        : 192.168.110.123(Static)
Mask      : 255.255.255.0(Static)
Assoc with: vmnic4
..............................
~ #
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next step is configure the gateway  for NSX vSwitch.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~ # nsxcli gw/set tunneling 192.168.110.2
~ #
~ # nsxcli gw/show tunneling
Tunneling:
Configured default gateway       : 192.168.110.2
Currently active default gateway : 192.168.110.2 (Manual)
~ #
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Connect NSX vSwitch instance to NSX controller cluster.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~ # nsxcli manager/set ssl:192.168.110.31
~ #
~ # nsx-dbctl show
e42912a7-693f-43ee-84d5-11b5bb3491eb
    Manager &quot;ssl:192.168.110.31:6632&quot;
    Bridge br-int
        fail_mode: secure
    Bridge &quot;br-vmnic4&quot;
        fail_mode: standalone
        Port &quot;vmk3&quot;
            Interface &quot;vmk3&quot;
        Port &quot;vmnic4&quot;
            Interface &quot;vmnic4&quot;
    ovs_version: &quot;2.1.3.35984&quot;
~ #
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create an opaque network. An opaque network is basically a transport
bridge that will provide the network backend for the virtual machines.
Opaque networks must be identified during its creation based on its type
and ID.&lt;/p&gt;

&lt;p&gt;In this particular case the ESXi will be added later to a cluster acting
as nova compute backend for my OpenStack lab so the network type must be
&lt;code&gt;nsx.network&lt;/code&gt; and the UUID have to match the configured one for the
&lt;code&gt;integration_bridge&lt;/code&gt; setting in &lt;code&gt;nova.conf&lt;/code&gt; file. We also need to
specify the port attach mode, for OpenStack environments is &lt;code&gt;manual&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~ # nsxcli network/add NSX-Bridge NSX-Bridge nsx.network manual
success
~ #
~ # nsxcli network/show
UUID                                        Name                    Type            Mode
----                                        ----                    ----            ----
NSX-Bridge                                  NSX-Bridge              nsx.network     manual
~ #
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;add-esxi-as-transport-node&quot;&gt;Add ESXi as transport node&lt;/h3&gt;

&lt;p&gt;The final part of the procedure is to add our new ESXi server as
transport node to NSX. Log into NSX Manager web UI and initiate the
wizard to add a new Hypervisor. First specify the name of the new
hypervisor.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2014/07/screen-shot-2014-07-14-at-02-13-30.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-07-14-at-02-13-30.png?w=580&quot; alt=&quot;Screen Shot 2014-07-14 at
02.13.30&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Set the integration bridge.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2014/07/screen-shot-2014-07-14-at-02-22-44.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-07-14-at-02-22-44.png?w=580&quot; alt=&quot;Screen Shot 2014-07-14 at
02.22.44&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Select &lt;em&gt;Security Certificate&lt;/em&gt; as credential type and paste the NSX
vSwitch SSL certificate. The certificate can be retrieved from
&lt;code&gt;/etc/nsxvswitch/nsxvswitch-cert.pem&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2014/07/screen-shot-2014-07-14-at-02-29-50.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-07-14-at-02-29-50.png?w=580&quot; alt=&quot;Screen Shot 2014-07-14 at
02.29.50&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add an SST transport connector, using the IP address configured for the
uplink.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2014/07/screen-shot-2014-07-14-at-02-31-57.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-07-14-at-02-31-57.png?w=580&quot; alt=&quot;Screen Shot 2014-07-14 at
02.31.57&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click Save &amp;amp; View and verify the new hypervisor configuration in NSX.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2014/07/screen-shot-2014-07-14-at-02-36-15.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-07-14-at-02-36-15.png?w=580&quot; alt=&quot;Screen Shot 2014-07-14 at
02.36.15&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The setup of our new ESXi server within NSX is done. As always comments
are welcomed.&lt;/p&gt;

&lt;p&gt;Juanma.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/networking/sysadmin/vmware/how-to-setup-esxi-for-nsx/&quot;&gt;How to setup ESXi for NSX&lt;/a&gt; was originally published by Juan Manuel Rey at &lt;a href=&quot;&quot;&gt;Juanma's Blog&lt;/a&gt; on July 14, 2014.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[My DevStack local.conf file]]></title>
  <link rel="alternate" type="text/html" href="/cloud/openstack/my-devstack-local-conf-file/" />
  <id>/cloud/openstack/my-devstack-local-conf-file</id>
  <published>2014-06-24T16:54:10+02:00</published>
  <updated>2014-06-24T16:54:10+02:00</updated>
  <author>
    <name></name>
    <uri></uri>
    
  </author>
  <content type="html">
    &lt;p&gt;One of the pillars of my personal OpenStack ecosystem is
&lt;strong&gt;&lt;a href=&quot;http://devstack.org/&quot;&gt;DevStack&lt;/a&gt;&lt;/strong&gt;. For those of you new to the
OpenStack world DevStack is a tool, basically is a shell script, that
allows to deploy a full OpenStack environment, installing every required
dependency. It is widely used amongst beginners and the development
community.&lt;/p&gt;

&lt;p&gt;My DevStack instance is a Fedora 20 virtual machine with 2 vCPUs and 2GB
of memory, I use it mostly for testing and development. I have setup a
small vSphere environment in Fusion with a vCSA virtual machine and a
nested ESXi, both 5.5 version. The DNS and NFS services are provided by
my management VM which is another Fedora 20 VM with just 512MB of RAM.&lt;/p&gt;

&lt;p&gt;https://gist.github.com/jreypo/ce4cfa3546dc6ac3ac8d&lt;/p&gt;

&lt;p&gt;My local.conf file is no rocket science as you have seen, but may be it
can be of help to anyone wanting to quickly setup a DevStack+vSphere
development environment.&lt;/p&gt;

&lt;p&gt;Juanma.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/cloud/openstack/my-devstack-local-conf-file/&quot;&gt;My DevStack local.conf file&lt;/a&gt; was originally published by Juan Manuel Rey at &lt;a href=&quot;&quot;&gt;Juanma's Blog&lt;/a&gt; on June 24, 2014.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Deploying OpenStack with KVM and VMware NSX - Part 4: Deploy OpenStack RDO with Neutron integrated with NSX]]></title>
  <link rel="alternate" type="text/html" href="/cloud/kvm/linux/networking/openstack/red%20hat/vmware/deploying-openstack-with-kvm-and-vmware-nsx-part-4-deploy-openstack-rdo-with-neutron-integrated-with-nsx/" />
  <id>/cloud/kvm/linux/networking/openstack/red%20hat/vmware/deploying-openstack-with-kvm-and-vmware-nsx-part-4-deploy-openstack-rdo-with-neutron-integrated-with-nsx</id>
  <published>2014-06-23T16:56:39+02:00</published>
  <updated>2014-06-23T16:56:39+02:00</updated>
  <author>
    <name></name>
    <uri></uri>
    
  </author>
  <content type="html">
    &lt;p&gt;Welcome to Part 4 for this series about OpenStack and VMware NSX. To do
a quick review, in the first three parts we described the different
&lt;a href=&quot;http://jreypo.wordpress.com/2014/04/29/deploying-openstack-with-kvm-and-vmware-nsx-part-1-nsx-overview-and-initial-setup/&quot; title=&quot;Deploying OpenStack with KVM and VMware NSX – Part 1: NSX overview and initial setup&quot;&gt;VMware NSX components and
concepts&lt;/a&gt;
and &lt;a href=&quot;http://jreypo.wordpress.com/2014/05/06/deploying-openstack-with-kvm-and-vmware-nsx-part-2-configure-nsx-transport-and-logical-network-views/&quot; title=&quot;Deploying OpenStack with KVM and VMware NSX – Part 2: Configure NSX Transport and Logical network views&quot;&gt;how to install and configure
them&lt;/a&gt;,
also discussed how to install and &lt;a href=&quot;http://jreypo.wordpress.com/2014/05/07/deploying-openstack-with-kvm-and-vmware-nsx-part-3-kvm-hypervisor-and-gluster-storage-setup/&quot; title=&quot;Deploying OpenStack with KVM and VMware NSX – Part 3:  KVM hypervisor and Gluster storage setup&quot;&gt;configure the KVM and GlusterFS
nodes&lt;/a&gt;.
In this fourth part of the series we will see how to deploy OpenStack in
a three-node architecture and integrate it with our existent NSX
installation.&lt;/p&gt;

&lt;p&gt;If you remember the first post where I described the components of the
lab, there were three OpenStack dedicated nodes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cloud controller node&lt;/li&gt;
  &lt;li&gt;Neutron networking node&lt;/li&gt;
  &lt;li&gt;Nova compute node&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Instead of installing from scratch I decided to go with one of the
OpenStack distributions:
&lt;a href=&quot;http://openstack.redhat.com/Main_Page&quot;&gt;&lt;strong&gt;RDO&lt;/strong&gt;&lt;/a&gt;. What is RDO and why I
decided for it? RDO is a community distribution of OpenStack sponsored
by &lt;a href=&quot;http://www.redhat.com/&quot;&gt;&lt;strong&gt;Red Hat&lt;/strong&gt;&lt;/a&gt;, yes I just say Red Hat so
please stop the eye rolling.&lt;/p&gt;

&lt;p&gt;RDO is the upstream version of RHEL OpenStack Platform, the commercial
version of OpenStack by Red Hat. During the last months I tried several
flavors of OpenStack and while I still think that installing from
scratch is the best way to learn, in fact is what I did for my first
labs, RDO gives me the possibility to quickly create my testing labs.
Also RHEL OP Version 4, based on RDO, is supported with VMware NSX and I
really couldn’t resist myself to try it.&lt;/p&gt;

&lt;h3 id=&quot;installation-prerequisites&quot;&gt;Installation prerequisites&lt;/h3&gt;

&lt;p&gt;Before proceeding with the installation there are some preparations we
need to perform on the OpenStack nodes.&lt;/p&gt;

&lt;h4 id=&quot;ssh-key-generation&quot;&gt;SSH key generation&lt;/h4&gt;

&lt;p&gt;Generate a new SSH key to be later distributed on the OpenStack nodes
during the installation. Use &lt;code&gt;ssh-keygen&lt;/code&gt; to generate the new key.&lt;/p&gt;

&lt;h4 id=&quot;neutron-server-preparation&quot;&gt;Neutron server preparation&lt;/h4&gt;

&lt;p&gt;In the Neutron node install NSX Open vSwitch version as described in
&lt;a href=&quot;http://jreypo.wordpress.com/2014/05/07/deploying-openstack-with-kvm-and-vmware-nsx-part-3-kvm-hypervisor-and-gluster-storage-setup/&quot; title=&quot;Deploying OpenStack with KVM and VMware NSX – Part 3:  KVM hypervisor and Gluster storage setup&quot;&gt;Part
3&lt;/a&gt;
for the KVM nodes, the network interface configuration it’s quite
similar.&lt;/p&gt;

&lt;p&gt;With the network interface configuration files properly setup exist your
SSH session and log into the VM console to create the OVS bridges like
the example below.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ovs-vsctl add-br br-ex
ovs-vsctl br-set-external-id br-ex bridge-id br-ex
ovs-vsctl set Bridge br-ex fail-mode=standalone
ovs-vsctl add-port br-ex eth0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;openstack-installation&quot;&gt;OpenStack installation&lt;/h3&gt;

&lt;p&gt;RDO relies on &lt;code&gt;packstack&lt;/code&gt; for the installation of its different
components. &lt;a href=&quot;https://github.com/stackforge/packstack&quot;&gt;Packstack&lt;/a&gt; is a
tool that will install all required software in the nodes based on an
answer file. Enable RDO and EPEL repos and install &lt;code&gt;openstack-packstack&lt;/code&gt;
package.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum install -y http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
yum install -y http://repos.fedorapeople.org/repos/openstack/openstack-havana/rdo-release-havana-8.noarch.rpm
yum install -y openstack-packstack
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once it is installed generate a new answer file, we will use this file
as a template for our installation.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;packstack --gen-answer-file rdo_answers.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Edit &lt;code&gt;packstack&lt;/code&gt; answer file and modify the following entries, leave the
rest with the default values. It is important to do not eliminate any
entry or &lt;code&gt;packstack&lt;/code&gt; execution will fail.&lt;/p&gt;

&lt;p&gt;Deactivate services we do not want to deploy.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CONFIG_SWIFT_INSTALL=n
CONFIG_CEILOMETER_INSTALL=n
CONFIG_NAGIOS_INSTALL=n
CONFIG_CINDER_INSTALL=n
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nova settings.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CONFIG_NOVA_COMPUTE_HOSTS=192.168.82.42
CONFIG_NOVA_NETWORK_HOSTS=
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally Neutron settings. Don’t set any L3 value since that part
will be managed by NSX.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CONFIG_NEUTRON_SERVER_HOST=192.168.82.41
CONFIG_NEUTRON_DHCP_HOSTS=192.168.82.41
CONFIG_NEUTRON_METADATA_HOSTS=192.168.82.41
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Launch OpenStack installation process.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;packstack --answer-file rdo_answers.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The installation will take a while so you better grab a cup of coffee
and have a look at the output while the software installs on each of the
three nodes. If everything goes as expected we should see a similar
message at the of the installation process.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; **** Installation completed successfully ******

Additional information:
 * Time synchronization installation was skipped. Please note that unsynchronized time on server instances might be problem for some OpenStack components.
 * File /root/keystonerc_admin has been created on OpenStack client host 192.168.82.40. To use the command line tools you need to source the file.
 * To access the OpenStack Dashboard browse to http://192.168.82.40/dashboard.
Please, find your login credentials stored in the keystonerc_admin in your home directory. 
 * Because of the kernel update the host 192.168.82.42 requires reboot. 
 * Because of the kernel update the host 192.168.82.40 requires reboot.
 * Because of the kernel update the host 192.168.82.41 requires reboot.
 * The installation log file is available at: /var/tmp/packstack/20140617-001835-On5TCi/openstack-setup.log 
 * The generated manifests are available at: /var/tmp/packstack/20140617-001835-On5TCi/manifests 
[root@cloud-controller ~]#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reboot the three nodes as instructed and proceed to the next step.&lt;/p&gt;

&lt;h4 id=&quot;configure-glance-to-use-glusterfs&quot;&gt;Configure Glance to use GlusterFS&lt;/h4&gt;

&lt;p&gt;RDO &lt;code&gt;packstack&lt;/code&gt; cannot configure Glance to use GlusterFS as its storage
backend during the installation and it has to be configured afterwards.
Fortunately the necessary steps are documented on &lt;a href=&quot;http://openstack.redhat.com/Using_GlusterFS_for_Glance_with_RDO_Havana&quot;&gt;RDO
site&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Stop Glance services.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;service openstack-glance-registry stop
service openstack-glance-api stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install gluster required packages on the controller node.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum install glusterfs-fuse glusterfs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mount GlusterFS share and set the ownership and permissions for &lt;code&gt;glance&lt;/code&gt;
user.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mount -t glusterfs gluster.vlab.local:gv0 /var/lib/glance/images
chown -R glance:glance /var/lib/glance/images
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Start Glance services.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;service openstack-glance-registry start
service openstack-glance-api start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With the installation finished OpenStack Horizon dashboard should be
available at http://cloud_controller_fqdn/dashboard. Log in with the
user admin, the password for this user can be found in the file
&lt;code&gt;/root/keystonerc_admin&lt;/code&gt; on the cloud controller node.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@cloud-controller ~]# cat keystonerc_admin
export OS_USERNAME=admin
export OS_TENANT_NAME=admin
export OS_PASSWORD=cd0ed5b5f251450f
export OS_AUTH_URL=http://192.168.82.40:35357/v2.0/
export PS1=&#39;[\u@\h \W(keystone_admin)]\$ &#39;
[root@cloud-controller ~]#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If login fails with an unexpected error check that firewall is
deactivated in all three nodes and that all services are up and running,
in some of my deployments Neutron server did not start after a reboot
and I had to start it manually.&lt;/p&gt;

&lt;p&gt;Once logged into horizon navigate to Admin -&amp;gt; Hypervisor and check
that the KVM hypervisor is properly registered.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2014/06/screen-shot-2014-06-17-at-01-56-04.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-06-17-at-01-56-04.png&quot; alt=&quot;Screen Shot 2014-06-17 at
01.56.04&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;configure-the-nsx-integration&quot;&gt;Configure the NSX integration&lt;/h3&gt;

&lt;p&gt;At this point we have a working OpenStack installation with Neutron
using the Open vSwitch plugin, now we will proceed to integrate our
shiny OpenStack cloud with NSX.&lt;/p&gt;

&lt;h4 id=&quot;install-nsx-neutron-plugin&quot;&gt;Install NSX Neutron plugin&lt;/h4&gt;

&lt;p&gt;VMware provides a set of RPM packages containing the NSX plugin and a
VMware sanctioned version of Neutron, however I found that this packages
were older than my Havana installation and didn’t want to brake any
dependencies and spend hours trying to fix my installation.&lt;/p&gt;

&lt;p&gt;A tar file containing all the source for both the plugin and Neutron
itself is also available and instructions on how to compile and install
it are provided in NSX documentation, during my first trials I took this
path but this time I decided to use the upstream plugin instead since it
was available in RDO repositories.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum install openstack-neutron-nicira
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;configure-nsx-plugin&quot;&gt;Configure NSX plugin&lt;/h3&gt;

&lt;p&gt;Register the Neutron server as a transport node on the NSX Controller
Cluster.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ovs-vsctl set-manager ssl:192.168.82.45
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Stop neutron services.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;service neutron-server stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Edit &lt;code&gt;/etc/neutron/neutron.conf&lt;/code&gt; file and set &lt;code&gt;core_plugin&lt;/code&gt; value to
&lt;code&gt;neutron.plugins.nicira.NeutronPlugin.NvpPluginV2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Configure &lt;code&gt;nvp.ini&lt;/code&gt; file accordingly, this file can be found in
&lt;code&gt;/etc/neutron/plugins/nicira&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Set NSX admin user and password.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nvp_user = admin
nvp_password = admin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Configure NSX controllers IP addresses.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nvp_controllers = 192.168.82.45
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Set the default Transport Zone UUID and the L3 and L2 gateway serveices
UUID, these values can be retrieved from the NSX Manager web.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;default_tz_uuid = b948fd35-5737-4a30-8741-43134771d40c
default_l3_gw_service_uuid = adee048c-3776-4bd2-ade1-42ab5c90bf9e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Configure metadata for Nova instances, set &lt;code&gt;metadata_dhcp_host_route&lt;/code&gt; to
&lt;code&gt;False&lt;/code&gt; in &lt;code&gt;[DEFAULT]&lt;/code&gt; section. In &lt;code&gt;[nvp]&lt;/code&gt; section set the metadata mode
as &lt;code&gt;access_network&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;enable_metadata_access_network = True
metadata_mode = access_network
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a &lt;code&gt;[database]&lt;/code&gt; section and configure the connection to Neutron
MySQL database, the data can be found on &lt;code&gt;neutron.conf&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[database]
connection = mysql://neutron:ac2191a8661b4b66@192.168.82.40/ovs_neutron
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;FInally before start Neutron services check &lt;code&gt;nvp.ini&lt;/code&gt; with the command
&lt;code&gt;neutron-check-nvp-config&lt;/code&gt;. You should get something like this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@neutron ~]# neutron-check-nvp-config /etc/neutron/plugins/nicira/nvp.ini
----------------------- Database Options -----------------------
        connection: mysql://neutron:ac2191a8661b4b66@192.168.82.40/ovs_neutron
        retry_interval: 10
        max_retries: 10
-----------------------    NVP Options   -----------------------
        NVP Generation Timeout -1
        Number of concurrent connections to each controller 10
        max_lp_per_bridged_ls: 5000
        max_lp_per_overlay_ls: 256
-----------------------  Cluster Options -----------------------
        requested_timeout: 30
        retries: 2
        redirects: 2
        http_timeout: 10
Number of controllers found: 1
        Controller endpoint: 192.168.82.45:443
                Gateway(L3GatewayServiceConfig) uuid: adee048c-3776-4bd2-ade1-42ab5c90bf9e
        Transport zones: [u&#39;b948fd35-5737-4a30-8741-43134771d40c&#39;]
Done.
[root@neutron ~]#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Start Neutron services&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;service neutron-server start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a network neutron command line to test that everything is working
as expected.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@cloud-controller ~(keystone_admin)]# neutron net-create nsx-test-net
Created a new network:
+-----------------------+--------------------------------------+
| Field                 | Value                                |
+-----------------------+--------------------------------------+
| admin_state_up        | True                                 |
| id                    | 24f3b23f-a938-40e7-b026-14c8fb77ff34 |
| name                  | nsx-test-net                         |
| port_security_enabled | True                                 |
| shared                | False                                |
| status                | ACTIVE                               |
| subnets               |                                      |
| tenant_id             | 4d9fbabd4c9d4fa4a2185ff7559ae4e8     |
+-----------------------+--------------------------------------+
[root@cloud-controller ~(keystone_admin)]#
[root@cloud-controller ~(keystone_admin)]# neutron net-list
+--------------------------------------+--------------+---------+
| id                                   | name         | subnets |
+--------------------------------------+--------------+---------+
| 24f3b23f-a938-40e7-b026-14c8fb77ff34 | nsx-test-net |         |
+--------------------------------------+--------------+---------+
[root@cloud-controller ~(keystone_admin)]#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Access NSX Manager web interface, navigate to Logical Switches and
confirm that a new logical switch with the same name and UUID as the new
OpenStack network has been created.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jreypo.files.wordpress.com/2014/06/screen-shot-2014-06-21-at-22-15-20.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-06-21-at-22-15-20.png?w=580&quot; alt=&quot;Screen Shot 2014-06-21 at
22.15.20&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! We have successfully deployed a distributed
installation of OpenStack with KVM as the underlying hypervisor and
integrated with VMware NSX state of the art network virtualization
software. In future posts out of this four article series we will
discuss some tips and other parts of OpenStack and NSX. Courteous
comments are welcome.&lt;/p&gt;

&lt;p&gt;Juanma.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/cloud/kvm/linux/networking/openstack/red%20hat/vmware/deploying-openstack-with-kvm-and-vmware-nsx-part-4-deploy-openstack-rdo-with-neutron-integrated-with-nsx/&quot;&gt;Deploying OpenStack with KVM and VMware NSX - Part 4: Deploy OpenStack RDO with Neutron integrated with NSX&lt;/a&gt; was originally published by Juan Manuel Rey at &lt;a href=&quot;&quot;&gt;Juanma's Blog&lt;/a&gt; on June 23, 2014.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Deploying OpenStack with KVM and VMware NSX - Part 3:  KVM hypervisor and Gluster storage setup]]></title>
  <link rel="alternate" type="text/html" href="/cloud/kvm/linux/networking/openstack/red%20hat/virtualization/vmware/deploying-openstack-with-kvm-and-vmware-nsx-part-3-kvm-hypervisor-and-gluster-storage-setup/" />
  <id>/cloud/kvm/linux/networking/openstack/red%20hat/virtualization/vmware/deploying-openstack-with-kvm-and-vmware-nsx-part-3-kvm-hypervisor-and-gluster-storage-setup</id>
  <published>2014-05-07T16:43:34+02:00</published>
  <updated>2014-05-07T16:43:34+02:00</updated>
  <author>
    <name></name>
    <uri></uri>
    
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/04/kvm.jpg&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/kvm.jpg?w=150&quot; alt=&quot;kvm&quot; /&gt;&lt;/a&gt;Welcome
to the third post of my series about OpenStack. In the
&lt;a href=&quot;http://jreypo.wordpress.com/2014/04/29/deploying-openstack-with-kvm-and-vmware-nsx-part-1-nsx-overview-and-initial-setup/&quot; title=&quot;Deploying OpenStack with KVM and VMware NSX – Part 1: NSX overview and initial setup&quot;&gt;first&lt;/a&gt;
and
&lt;a href=&quot;http://jreypo.wordpress.com/2014/05/06/deploying-openstack-with-kvm-and-vmware-nsx-part-2-configure-nsx-transport-and-logical-network-views/&quot; title=&quot;Deploying OpenStack with KVM and VMware NSX. Part 2 – Configure NSX Transport and Logical network views&quot;&gt;second&lt;/a&gt;
posts we saw in detail how to prepare the basic network infrastructure
of our future OpenStack cloud using VMware NSX. In this third one we are
going to install and configure the KVM compute host and the shared
storage of the lab.&lt;/p&gt;

&lt;h3 id=&quot;kvm-setup&quot;&gt;KVM setup&lt;/h3&gt;

&lt;p&gt;Create and install two CentOS 6.4 virtual machines with 2 vCPU, 2 GB of
RAM, 2 network interfaces (E1000) and one 16GB disk. For the
partitioning schema I have used the following one:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;sda1 - 512MB - /boot&lt;/li&gt;
  &lt;li&gt;sda2 - Rest of the disk - LVM PV
    &lt;ul&gt;
      &lt;li&gt;lv_root - 13.5GB - /&lt;/li&gt;
      &lt;li&gt;lv_swap - 2GB - swap&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mark Base and Standard groups to be installed and leave the rest
unchecked. Set the hostname during the installation and leave the
networking configuration with the default values. Please have in mind
that you will need to have a DHCP server on your network, in my case I’m
using the one that comes with VMware Fusion if you don’t have one then
you will have to set here a temporary IP address in order to able to
install the KVM software. Once the installation is done reboot your
virtual machine and open a root SSH session to proceed with the rest of
the configuration tasks.&lt;/p&gt;

&lt;p&gt;Disable SELinux with &lt;code&gt;setenfornce&lt;/code&gt; command, also modify SELinux config
to disable it during OS boot. I do not recommend to disable SELinux in a
production environment but for a lab it will simplify things.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;setenforce 0
cp /etc/selinux/config /etc/selinux/config.orig
sed -i s/SELINUX\=enforcing/SELINUX\=disabled/ /etc/selinux/config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Check that hardware virtualization support is activated.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;egrep -i &#39;vmx|svm&#39; /proc/cpuinfo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install KVM packages.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum install kvm libvirt python-virtinst qemu-kvm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After installing a ton of dependencies and if t nothing failed enable
and start the libvirtd service.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@kvm1 ~]# chkconfig libvirtd on
[root@kvm1 ~]# service libvirtd start
Starting libvirtd daemon:                                  [  OK  ]
[root@kvm1 ~]#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Verify that KVM has been correctly installed and it’s loaded and running
on the system.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@kvm1 ~]# lsmod | grep kvm
kvm_intel              53484  0
kvm                   316506  1 kvm_intel
[root@kvm1 ~]#
[root@kvm1 ~]# virsh -c qemu:///system list
 Id    Name                           State
----------------------------------------------------

[root@kvm1 ~]#
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;hypervisor-networking-setup&quot;&gt;Hypervisor networking setup&lt;/h3&gt;

&lt;p&gt;With KVM software installed and ready we can now move on to configure
the networking for both hosts and integrate them into our NSX
deployment.&lt;/p&gt;

&lt;p&gt;Disable Network Manager for both interfaces. Edit
&lt;code&gt;/etc/sysconfig/network-scripts/ifcfg-ethX&lt;/code&gt; files and change
&lt;code&gt;NM_CONTROLLED&lt;/code&gt; value to &lt;code&gt;no&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By default libvirt creates &lt;code&gt;virbr0&lt;/code&gt; network bridge to be used for the
virtual machines to access the external network through a NAT
connection. We need to disable it to ensure that bridge components of
Open vSwitch can load without any errors.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;virsh net-destroy default
virsh net-autostart --disable default
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;install-open-vswitch&quot;&gt;Install Open vSwitch&lt;/h4&gt;

&lt;p&gt;Copy the NSX OVS package to the KVM host and extract it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@kvm1 nsx-ovs]# tar vxfz nsx-ovs-2.1.0-build33849-rhel64_x86_64.tar.gz
./
./nicira-flow-stats-exporter/
./nicira-flow-stats-exporter/nicira-flow-stats-exporter-4.1.0.32691-1.x86_64.rpm
./tcpdump-ovs-4.4.0.ovs2.1.0.33849-1.x86_64.rpm
./kmod-openvswitch-2.1.0.33849-1.el6.x86_64.rpm
./openvswitch-2.1.0.33849-1.x86_64.rpm
./nicira-ovs-hypervisor-node-2.1.0.33849-1.x86_64.rpm
./nicira-ovs-hypervisor-node-debuginfo-2.1.0.33849-1.x86_64.rpm
[root@kvm1 nsx-ovs]#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install Open vSwitch packages.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rpm -Uvh kmod-openvswitch-2.1.0.33849-1.el6.x86_64.rpm
rpm -Uvh openvswitch-2.1.0.33849-1.x86_64.rpm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Verify that Open vSwitch service is enabled and start it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@kvm1 ~]# chkconfig --list openvswitch
openvswitch     0:off   1:off   2:on    3:on    4:on    5:on    6:off
[root@kvm1 ~]#
[root@kvm1 ~]#
[root@kvm1 ~]# service openvswitch start
/etc/openvswitch/conf.db does not exist ... (warning).
Creating empty database /etc/openvswitch/conf.db           [  OK  ]
Starting ovsdb-server                                      [  OK  ]
Configuring Open vSwitch system IDs                        [  OK  ]
Inserting openvswitch module                               [  OK  ]
Starting ovs-vswitchd                                      [  OK  ]
Enabling remote OVSDB managers                             [  OK  ]
[root@kvm1 ~]#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install &lt;code&gt;nicira-ovs-hypervisor-node&lt;/code&gt; package, this utility provides the
infrastructure for distributed routing on the hypervisor. With the
installation the integration bridge &lt;code&gt;br-int&lt;/code&gt; and OVS SSL credentials
will be created.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@kvm1 ~]# rpm -Uvh nicira-ovs-hypervisor-node*.rpm
Preparing...                ########################################### [100%]
   1:nicira-ovs-hypervisor-n########################################### [ 50%]
   2:nicira-ovs-hypervisor-n########################################### [100%]
Running &#39;/usr/sbin/ovs-integrate init&#39;
successfully generated self-signed certificates..
successfully created the integration bridge..
[root@kvm1 ~]#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are other packages like &lt;code&gt;nicira-flow-stats-exporter&lt;/code&gt; and
&lt;code&gt;tcpdump-ovs&lt;/code&gt; but they are not needed for OVS functioning. We can
proceed now with OVS configuration.&lt;/p&gt;

&lt;h4 id=&quot;configure-open-vswitch&quot;&gt;Configure Open vSwitch&lt;/h4&gt;

&lt;p&gt;The first step is to create OVS bridges for each network interface card
of the hypervisor.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ovs-vsctl add-br br0
ovs-vsctl br-set-external-id br0 bridge-id br0
ovs-vsctl set Bridge br0 fail-mode=standalone
ovs-vsctl add-port br0 eth0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you were logged in by an SSH session you have probably noticed that
your connection is lost, this is because &lt;code&gt;br0&lt;/code&gt; interface has taken
control of the networking of the host and it doesn’t have an IP address
configured. To solve this access the host console and edit &lt;code&gt;ifcfg-eth0&lt;/code&gt;
file and modify to look like this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DEVICE=eth0
DEVICETYPE=ovs
TYPE=OVSPort
OVS_BRIDGE=br0
ONBOOT=yes
BOOTPROTO=none
IPV6INIT=no
NAME=eth0
HOTPLUG=no
HWADDR=00:0C:29:CA:34:FE
NM_CONTROLLED=no
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next create and edit &lt;code&gt;ifcfg-br0&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DEVICE=br0
DEVICETYPE=ovs
TYPE=OVSBridge
ONBOOT=yes
BOOTPROTO=static
IPADDR=192.168.82.42
NETMASK=255.255.255.0
GATEWAY=192.168.82.2
IPV6INIT=no
HOTPLUG=no
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Restart the network service and test the connection.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;service network restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Repeat all the above steps for the second network interface.&lt;/p&gt;

&lt;p&gt;Finally configure NSX Controller Cluster as manager in Open vSwitch.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ovs-vsctl set-manager ssl:192.168.82.44
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Execute &lt;code&gt;ovs-vsctl show&lt;/code&gt; command to review OVS current configuration.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@kvm1 ~]# ovs-vsctl show
383c3f17-5c53-4992-be8e-6e9b195e51d8
    Manager &quot;ssl:192.168.82.44&quot;
    Bridge &quot;br1&quot;
        fail_mode: standalone
        Port &quot;br1&quot;
            Interface &quot;br1&quot;
                type: internal
        Port &quot;eth1&quot;
            Interface &quot;eth1&quot;
    Bridge &quot;br0&quot;
        fail_mode: standalone
        Port &quot;eth0&quot;
            Interface &quot;eth0&quot;
        Port &quot;br0&quot;
            Interface &quot;br0&quot;
                type: internal
    Bridge br-int
        fail_mode: secure
        Port br-int
            Interface br-int
                type: internal
    ovs_version: &quot;2.1.0.33849&quot;
[root@kvm1 ~]#
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;register-ovs-in-nsx-controller&quot;&gt;Register OVS in NSX Controller&lt;/h4&gt;

&lt;p&gt;With our OVS instance installed and running we can now inform NSX
Controller of its existence either via NVP API or NSX Manager, in our
case we will use the later.&lt;/p&gt;

&lt;p&gt;Log into NSX Manager as admin user and go to &lt;em&gt;Dashboard&lt;/em&gt;, from &lt;em&gt;Summary
of Transport Components&lt;/em&gt; table click &lt;em&gt;Add&lt;/em&gt; in the Hypervisors row.
Verify that Hypervisor is selected as transport node and move to the
Basics screen. Enter a name for the hypervisor, usually the hostname of
the server.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/05/screen-shot-2014-05-05-at-23-18-22.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-05-05-at-23-18-22.png?w=580&quot; alt=&quot;Screen Shot 2014-05-05 at
23.18.22&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In Properties enter:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Integration bridge ID, for us is &lt;code&gt;br-int&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Admin Status Enabled -  Enabled by default.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/05/screen-shot-2014-05-05-at-23-29-03.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-05-05-at-23-29-03.png?w=580&quot; alt=&quot;Screen Shot 2014-05-05 at
23.29.03&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the Credential screen we are going to need the SSL certificate that
was created along with the integration bridge during the NSX OVS
installation. The PEM certificate file is &lt;code&gt;ovsclient-cert.pem&lt;/code&gt; and is in
&lt;code&gt;/etc/openvswitch&lt;/code&gt; directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@kvm1 ~]# cat /etc/openvswitch/ovsclient-cert.pem
-----BEGIN CERTIFICATE-----
MIIDwjCCAqoCCQDZUob5H9tzvjANBgkqhkiG9w0BAQUFADCBojELMAkGA1UEBhMC
VVMxCzAJBgNVBAgTAkNBMRIwEAYDVQQHEwlQYWxvIEFsdG8xFTATBgNVBAoTDE9w
ZW4gdlN3aXRjaDEfMB0GA1UECxMWT3BlbiB2U3dpdGNoIGNlcnRpZmllcjE6MDgG
A1UEAxMxb3ZzY2xpZW50IGlkOjA4NWQwMTFiLTJiMzYtNGQ5My1iMWIyLWJjODIz
MDczYzE0YzAeFw0xNDA1MDQyMjE3NTVaFw0yNDA1MDEyMjE3NTVaMIGiMQswCQYD
VQQGEwJVUzELMAkGA1UECBMCQ0ExEjAQBgNVBAcTCVBhbG8gQWx0bzEVMBMGA1UE
ChMMT3BlbiB2U3dpdGNoMR8wHQYDVQQLExZPcGVuIHZTd2l0Y2ggY2VydGlmaWVy
MTowOAYDVQQDEzFvdnNjbGllbnQgaWQ6MDg1ZDAxMWItMmIzNi00ZDkzLWIxYjIt
YmM4MjMwNzNjMTRjMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwgqT
hvG72vat0hXvTuukZOs6fM4CAphmN34l4415q/vReSM3upN+vOLoyGJ/8VJGdNXH
3Bsu6V58f6o8EPbfnhgqf2rCP0r5kiiN5SivsAWI5//ltV1GDFO4+8VpYAwn4Cbd
sNOuFEM1mKOR//IL3Riy9Nkh16wfLy44KEE9745uhZ9gW96AkSkBx1ajjUiApnjL
M6L2w/E4sxNeMDLf/VYlc/SuEg775D9iaPpA1haJt8FFw1g769FsR9Q0Fl+CoT7f
ggBZTKwwcoU+5Ew1mNlPV0Hm8vpFcXbtMBeuT9Fe7k4bC+UuQPaSnbPpbZMpx/wd
fHOdJpemcog/0EjOJQIDAQABMA0GCSqGSIb3DQEBBQUAA4IBAQDBPNM/uI25ofIl
AgCpG42UD3M/RZRPX0/6Be4jCTaAuET6J8wAKA4k1btA6UPt0M98N6o4y60Du2D+
ZwFOa2LSTXZB43X70XnDKxapDVqmhKtrmX2hL1NRD9RjTTx3TOXMOlUiUizRB1+L
d8MNhX3qrvOLeFOUnxm6C5RnI/HdqvS9TyxybX+Qfqit9Q66hbjAt9RribXSw21G
Ix8d9S4NyDO91mDstIcXeNRUk8K64gEQSKxQO9QKmVAQBIlYAJVVXzfkXyHEiKTe
0zIsW/oknwWeQMD9xSrKomY/5+LCuDM1jT5LcL8vxmrEVIrUjNqt4nQsT4mjooG+
XYf2HdXj
-----END CERTIFICATE-----
[root@kvm1 ~]#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Copy the contents of the file and paste them in the &lt;em&gt;Security
Certificate&lt;/em&gt; text box.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/05/screen-shot-2014-05-05-at-23-36-28.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-05-05-at-23-36-28.png?w=580&quot; alt=&quot;Screen Shot 2014-05-05 at
23.36.28&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally add the Transport Connector with the values:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Transport Type: STT&lt;/li&gt;
  &lt;li&gt;Transport Zone UUID: The transport zone, in my case the UUID
corresponding to &lt;em&gt;vlab-transport-zone.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;IP Address - The address of the br0 interface of the host.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/05/screen-shot-2014-05-05-at-23-41-57.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-05-05-at-23-41-57.png&quot; alt=&quot;Screen Shot 2014-05-05 at
23.41.57&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click Save &amp;amp; View and check that &lt;strong&gt;Management&lt;/strong&gt; and &lt;strong&gt;OpenFlow&lt;/strong&gt;
connections are up.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/05/screen-shot-2014-05-05-at-23-52-16.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-05-05-at-23-52-16.png?w=580&quot; alt=&quot;Screen Shot 2014-05-05 at
23.52.16&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;glusterfs-setup&quot;&gt;GlusterFS setup&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/04/gluster-logo-300x115.jpg&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/gluster-logo-300x115.jpg?w=150&quot; alt=&quot;gluster-logo-300x115&quot; /&gt;&lt;/a&gt;I
choose &lt;strong&gt;&lt;a href=&quot;http://www.gluster.org/&quot;&gt;GlusterFS&lt;/a&gt;&lt;/strong&gt; for my OpenStack lab for
two reasons.  I have used it in the past so this has been a good
opportunity for me to refresh and enhance my rusty gluster skills, and
it’s supported as storage backend for Glance in OpenStack. Instead of
going with CentOS again this time I choose Fedora 20 for my gluster VM,
a real world GlusterFS cluster will have at least two node but for our
lab one will be enough.&lt;/p&gt;

&lt;p&gt;Create a Fedora x64 virtual machine with 1 vCPU, 1GB of RAM and one
network interface. For the storage part use the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;System disk: 16GB&lt;/li&gt;
  &lt;li&gt;Data disk: 72GB&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use the same partitioning schema of the KVM hosts for the system disk.
Choose a Minimal installation and add the Standard group. Configure the
hostname and the IP address of the node, set the root password and
create a user as administrator, I’m using here my personal user &lt;code&gt;jrey.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Disable SELinux.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo setenforce 0
sudo cp /etc/selinux/config /etc/selinux/config.orig
sudo sed -i s/SELINUX\=enforcing/SELINUX\=disabled/ /etc/selinux/config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Stop and disable firewalld.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo systemctl disable firewalld.service
sudo systemctl stop firewalld.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install GlusterFS packages. There is no need to add any additional yum
repository since Gluster is included in the standard Fedora repos.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo systemctl install glusterfs-server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Enable Gluster services.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo systemctl enable glusterd.service
sudo systemctl enable glusterfsd.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Start Gluster services.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[jrey@gluster ~]$ sudo systemctl start glusterd.service
[jrey@gluster ~]$ sudo systemctl start glusterfsd.service
[jrey@gluster ~]$
[jrey@gluster ~]$ sudo systemctl status glusterd.service
glusterd.service - GlusterFS an clustered file-system server
   Loaded: loaded (/usr/lib/systemd/system/glusterd.service; enabled)
   Active: active (running) since Mon 2014-04-28 17:17:35 CEST; 20s ago
  Process: 1496 ExecStart=/usr/sbin/glusterd -p /run/glusterd.pid (code=exited, status=0/SUCCESS)
 Main PID: 1497 (glusterd)
   CGroup: /system.slice/glusterd.service
           └─1497 /usr/sbin/glusterd -p /run/glusterd.pid

Apr 28 17:17:35 gluster.vlab.local systemd[1]: Started GlusterFS an clustered file-system server.
[jrey@gluster ~]$
[jrey@gluster ~]$ sudo systemctl status glusterfsd.service
glusterfsd.service - GlusterFS brick processes (stopping only)
   Loaded: loaded (/usr/lib/systemd/system/glusterfsd.service; enabled)
   Active: active (exited) since Mon 2014-04-28 17:17:45 CEST; 15s ago
  Process: 1515 ExecStart=/bin/true (code=exited, status=0/SUCCESS)
 Main PID: 1515 (code=exited, status=0/SUCCESS)

Apr 28 17:17:45 gluster.vlab.local systemd[1]: Starting GlusterFS brick processes (stopping only)...
Apr 28 17:17:45 gluster.vlab.local systemd[1]: Started GlusterFS brick processes (stopping only).
[jrey@gluster ~]$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since we are running a one-node cluster there is no need to add any node
to the trusted pool. In case you decide to run a multinode environment
you can setup the pool by running the following command on each node of
the clsuter. .&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gluster peer probe &amp;lt;IP_ADDRESS_OF_OTHER_NODE&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Edit the data disk with &lt;code&gt;fdisk&lt;/code&gt; and create a single partition. Format
the partition as XFS.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[jrey@gluster ~]$ sudo mkfs.xfs -i size=512 /dev/sdb1
meta-data=/dev/sdb1              isize=512    agcount=4, agsize=4718528 blks
         =                       sectsz=512   attr=2, projid32bit=0
data     =                       bsize=4096   blocks=18874112, imaxpct=25
         =                       sunit=0      swidth=0 blks
naming   =version 2              bsize=4096   ascii-ci=0
log      =internal log           bsize=4096   blocks=9215, version=2
         =                       sectsz=512   sunit=0 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0
[jrey@gluster ~]$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create the mount point for the new filesystem, mount the partition and
edit &lt;code&gt;/etc/fstab&lt;/code&gt; accordingly to make it persistent to reboots.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo mkdir -p /data/glance/
sudo mount /dev/sdb1 /data/glance
sudo mkdir -p /data/glance/brick1
sudo echo &quot;/dev/sdb1 /data/glance xfs defaults 0 0&quot; &amp;gt;&amp;gt; /etc/fstab
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create the Gluster volume and start it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[jrey@gluster ~]$ sudo gluster volume create gv0 gluster.vlab.local:/data/glance/brick1
volume create: gv0: success: please start the volume to access data
[jrey@gluster ~]$
[jrey@gluster ~]$ sudo gluster volume start gv0
volume start: gv0: success
[jrey@gluster ~]$
[jrey@gluster ~]$ sudo gluster volume info

Volume Name: gv0
Type: Distribute
Volume ID: d1ad2d00-6210-4856-a5eb-26ddcba77a70
Status: Started
Number of Bricks: 1
Transport-type: tcp
Bricks:
Brick1: gluster.vlab.local:/data/glance/brick1
[jrey@gluster ~]$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The configuration of the Gluster node is finished. In the next article
we will install and configure OpenStack using the different components
detailed during current and previous parts of the series.&lt;/p&gt;

&lt;p&gt;Please feel free to add any comment or correction.&lt;/p&gt;

&lt;p&gt;Juanma.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/cloud/kvm/linux/networking/openstack/red%20hat/virtualization/vmware/deploying-openstack-with-kvm-and-vmware-nsx-part-3-kvm-hypervisor-and-gluster-storage-setup/&quot;&gt;Deploying OpenStack with KVM and VMware NSX - Part 3:  KVM hypervisor and Gluster storage setup&lt;/a&gt; was originally published by Juan Manuel Rey at &lt;a href=&quot;&quot;&gt;Juanma's Blog&lt;/a&gt; on May 07, 2014.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Deploying OpenStack with KVM and VMware NSX - Part 2: Configure NSX Transport and Logical network views]]></title>
  <link rel="alternate" type="text/html" href="/cloud/linux/networking/openstack/vmware/deploying-openstack-with-kvm-and-vmware-nsx-part-2-configure-nsx-transport-and-logical-network-views/" />
  <id>/cloud/linux/networking/openstack/vmware/deploying-openstack-with-kvm-and-vmware-nsx-part-2-configure-nsx-transport-and-logical-network-views</id>
  <published>2014-05-06T22:12:21+02:00</published>
  <updated>2014-05-06T22:12:21+02:00</updated>
  <author>
    <name></name>
    <uri></uri>
    
  </author>
  <content type="html">
    &lt;p&gt;Welcome to Part 2 of this series about OpenStack and NSX. In the &lt;a href=&quot;http://jreypo.wordpress.com/2014/04/29/deploying-openstack-with-kvm-and-vmware-nsx-part-1-nsx-overview-and-initial-setup/&quot; title=&quot;Deploying OpenStack with KVM and VMware NSX – Part 1: NSX overview and initial setup&quot;&gt;first
part&lt;/a&gt;
we defined the basic NSX concepts and components, installed and
configured the NSX appliances and connected the NSX Controller Cluster
with the NSX Manager. In this second part we will see how Transport and
Logical networks are configured, get yourself comfortable because this
is going to be a long post :-)&lt;/p&gt;

&lt;p&gt;To quickly refresh our concepts remember that the logical network
represents the virtual machine point of view of the network and the
transport network represents the underlying physical network through its
transport nodes.&lt;/p&gt;

&lt;h3 id=&quot;configure-the-transport-network&quot;&gt;Configure the Transport Network&lt;/h3&gt;

&lt;p&gt;The first step to have a fully functional NSX infrastructure is to
configure the &lt;strong&gt;Transport Network&lt;/strong&gt;. The Transport Network is made of
the Transport Zone and the Transport Nodes. These transport nodes can be
NSX appliances like Service Nodes or Gateways and hypervisors like KVM
or ESXi hosts. Third-party hardware L2 Gateways can also be transport
nodes but those are out of the scope of this series.&lt;/p&gt;

&lt;h4 id=&quot;create-a-transport-zone&quot;&gt;Create a Transport Zone&lt;/h4&gt;

&lt;p&gt;A Transport Zone is a representation of the physical network used to to
send traffic between OVS instances. Without a transport zone the
transport nodes cannot be connected to NSX so it is mandatory that you
define it before performing any operation on them.&lt;/p&gt;

&lt;p&gt;Select &lt;em&gt;Network Components&lt;/em&gt; &amp;gt; &lt;em&gt;Transport Layer&lt;/em&gt; &amp;gt; &lt;em&gt;Transport
Zones&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/04/screen-shot-2014-04-28-at-22-30-40.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-04-28-at-22-30-40.png&quot; alt=&quot;Screen Shot 2014-04-28 at
22.30.40&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the next screen click &lt;em&gt;Add&lt;/em&gt; to launch the &lt;em&gt;Create Transport Zone&lt;/em&gt;
wizard. This same wizard can also be launched from the Dashboard screen
in the &lt;em&gt;Summary of Transport Components&lt;/em&gt; area click the &lt;em&gt;Add&lt;/em&gt; button
form the &lt;em&gt;Zones&lt;/em&gt; row.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/04/screen-shot-2014-04-28-at-22-36-05.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-04-28-at-22-36-05.png&quot; alt=&quot;Screen Shot 2014-04-28 at
22.36.05&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter the name of the Transport Zone and click &lt;em&gt;Save &amp;amp; View&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/04/screen-shot-2014-04-28-at-22-41-43.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-04-28-at-22-41-43.png?w=300&quot; alt=&quot;Screen Shot 2014-04-28 at
22.41.43&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The new transport zone will now be available.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/04/screen-shot-2014-04-29-at-00-11-59.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-04-29-at-00-11-59.png?w=580&quot; alt=&quot;Screen Shot 2014-04-29 at
00.11.59&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With the Transport Zone created we can start configuring the transport
nodes.&lt;/p&gt;

&lt;h4 id=&quot;configure-the-transport-nodes&quot;&gt;Configure the Transport Nodes&lt;/h4&gt;

&lt;p&gt;As we detailed in Part 1 the Service Node appliances are installed and
configured independently as the rest of the appliances however they need
to be added to NSX Controller Cluster in order to be able to perform the
offloading function for the OVS devices.&lt;/p&gt;

&lt;p&gt;From the &lt;em&gt;Summary of Transport Components&lt;/em&gt; section in the Dashboard
screen click &lt;em&gt;Add&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/04/screen-shot-2014-04-29-at-00-29-14.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-04-29-at-00-29-14.png&quot; alt=&quot;Screen Shot 2014-04-29 at
00.29.14&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Create Service Node&lt;/em&gt; window will show up. In the first screen
select &lt;em&gt;Service Node&lt;/em&gt; as the &lt;em&gt;Transport Node Type&lt;/em&gt; and click &lt;em&gt;Next&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/04/screen-shot-2014-04-29-at-00-31-59.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-04-29-at-00-31-59.png?w=580&quot; alt=&quot;Screen Shot 2014-04-29 at
00.31.59&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter the display name for the Service Node, in this case &lt;em&gt;nsxsn&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/04/screen-shot-2014-04-29-at-00-39-15.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-04-29-at-00-39-15.png?w=580&quot; alt=&quot;Screen Shot 2014-04-29 at
00.39.15&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the Properties screen you will see three settings available.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Management Rendezvous Server - Used to designate the Service Node
Management Rendezvous, it will proxy management traffic between NSX
Controller Cluster and remote NSX Gateways.&lt;/li&gt;
  &lt;li&gt;Admin Status Enabled - Used to enable or disable the Transport Node.&lt;/li&gt;
  &lt;li&gt;Tunnel Keep Alive Spray - Used to improve the health testing of
transport node’s tunnels.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For our lab leaving the default values will suffice.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/04/screen-shot-2014-04-29-at-00-55-46.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-04-29-at-00-55-46.png?w=580&quot; alt=&quot;Screen Shot 2014-04-29 at
00.55.46&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the next step get the SSL certificate from the Service Node.
Establish an SSH session with the appliance as &lt;code&gt;admin&lt;/code&gt; user and use the
&lt;code&gt;show switch certificate&lt;/code&gt; command. The output of the command can be a
bit large, we just need the certificate itself.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-----BEGIN CERTIFICATE-----
MIIDgjCCAmoCAQMwDQYJKoZIhvcNAQEEBQAwgYExCzAJBgNVBAYTAlVTMQswCQYD
VQQIEwJDQTEVMBMGA1UEChMMT3BlbiB2U3dpdGNoMREwDwYDVQQLEwhzd2l0Y2hj
YTE7MDkGA1UEAxMyT1ZTIHN3aXRjaGNhIENBIENlcnRpZmljYXRlICgyMDE0IEFw
ciAyNyAyMzoyMDowNSkwHhcNMTQwNDI3MjMyMDUzWhcNMjQwNDI0MjMyMDUzWjCB
izELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRUwEwYDVQQKEwxPcGVuIHZTd2l0
Y2gxHzAdBgNVBAsTFk9wZW4gdlN3aXRjaCBjZXJ0aWZpZXIxNzA1BgNVBAMTLmNs
aWVudCBpZDpjYWIwNWU2OS1iZjI5LTRkMjItYTY1Ny0zYTJhZThkNjgyY2MwggEi
MA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC9lAk6DZWO/miggjjXk4xQd3hv
ieTPpjklw6Q4UKW+qMt0GjhC06n/cVK4kR12v1aCcxsKWmPK8LC1vU68e2T61zLe
NjRYHfa9VhqKjAY5p9xPcmQGli8+Cff47LfUVylEA+74YNMDHCuJbMagtwJOXSUa
UpaB3EnsEu6C4d4RzMBn55tlDbWAuFojH9JAki3g4maMqJRhILRUYoUFoSknmUvC
8cm719TcXw4u5cAzNBC2mMv6uRuDd+l1VquhFkksP2Di3D0/kI2yBW7lgDRTE4fn
O8hLasNPuGg24mOAkW/OIvusieW2MSqEwhGV5+G4fRgbRAI1ijTRT1K4dZuhAgMB
AAEwDQYJKoZIhvcNAQEEBQADggEBAB5bqYe2LXlIbwHSx1j28d/5FBmGxMd5LUEB
h29B+nTj3wVZkZpIxFoP/QRhzMXPWGM1PeixWN9o8oSZfrCEA7yMcn3uMMwdAmNz
7eNv4svw19hccWEvdNRBkQKdDX1YKItwUJKqVMJnI2dCqsGD4H1R9uwU+QJuEIgm
VMEoHYq7TwQXX6TR1eebjOKdeg4laOcsKystHTW+wuMBfOfcoYIuEZMQ7SOsRANe
l1hm3VI7t1gxp38r9JbtEC2jCqqBMzR+ZrzmodLsn/VgFDv8QiUZ5tFHaWl+jhQ/
JWxXqjLo42B6fRUA04wF6tJKnu3KDaVFIx4ssvKw2Q5u6PNSf8I=
-----END CERTIFICATE-----
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go back to the &lt;em&gt;Create Service Node&lt;/em&gt; window and select &lt;em&gt;Security
Certificate&lt;/em&gt; as credential type and paste the certificate extracted from
the Service Node in the &lt;em&gt;Security Certificate&lt;/em&gt; text area.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/04/screen-shot-2014-04-29-at-01-08-43.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-04-29-at-01-08-43.png?w=580&quot; alt=&quot;Screen Shot 2014-04-29 at
01.08.43&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The final step is to setup the &lt;em&gt;Transport Connectors&lt;/em&gt;. Click &lt;em&gt;Add
Connector&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/04/screen-shot-2014-04-29-at-01-15-22.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-04-29-at-01-15-22.png?w=580&quot; alt=&quot;Screen Shot 2014-04-29 at
01.15.22&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;Create Transport Connector&lt;/em&gt; screen select STT as the &lt;em&gt;Transport
Type.&lt;/em&gt; Select the transport zone the we created before and enter the IP
address of the Service Node.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/04/screen-shot-2014-04-29-at-01-20-01.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-04-29-at-01-20-01.png?w=300&quot; alt=&quot;Screen Shot 2014-04-29 at
01.20.01&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the Connector is create click Save in the final screen and the new
Service Node will be added to the NSX Controller.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/04/screen-shot-2014-04-29-at-01-25-08.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-04-29-at-01-25-08.png?w=580&quot; alt=&quot;Screen Shot 2014-04-29 at
01.25.08&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we need to finish the Gateway appliance configuration in a similar
way as we did with the Service Node. Again from the Dashboard and the
&lt;em&gt;Summary of Transport Components&lt;/em&gt; section, launch the &lt;em&gt;Create Gateway&lt;/em&gt;
by clicking the Add button in the Gateways row. The rest of the steps
are very similar to the Service Node process.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Select Gateway as &lt;em&gt;Transport Node Type&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Get the SSL certificate from NSX Gateway with the
&lt;code&gt;show switch certificate&lt;/code&gt; command.&lt;/li&gt;
  &lt;li&gt;Configure the credentials using the SSL certificate&lt;/li&gt;
  &lt;li&gt;Create an STT Transport Connector and set the IP address of the
Gateway&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All the above Transport Node related tasks can be achieved through the
command line by using the &lt;code&gt;request transport-node-register&lt;/code&gt; command.
This is a hidden command that can be used to register Service Nodes or
Gateways in a NSX Controller Cluster. According to NSX documentation
there are two versions of the command:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;cert - Used for production environments&lt;/li&gt;
  &lt;li&gt;mgmt-ip - Used for testing environments&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first one will transmit the encoded PEM certificates to the NSX
Controller while the second will use the appliance management IP as the
credential. The arguments for both versions are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;controller-ip-url&lt;/code&gt; - Switch manager address of the NSX Controller
Cluster, accepts IP or hostname and the TCP port to connect to.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ctrler-username&lt;/code&gt; - NSX administration account for the Controller.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ctrler-password&lt;/code&gt; - NSX administration account password.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;mgmt-ip&lt;/code&gt; - The IP address of the transport node.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;cert&lt;/code&gt; - As we detailed before this one is exclusive of mgmt-ip
and viceversa.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;rendezvous-yes-or-no&lt;/code&gt; - Simply pass yes or no to indicate that the
transport node is a Management Rendezvous Server one.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;tc-ip-address&lt;/code&gt; - IP address of the transport node  connector.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;tc-zone.uuid&lt;/code&gt; - Transport Zone to be associated with the
transport node.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;tc-type&lt;/code&gt; - Encapsulation format for the transport node’s
transport connector.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With those arguments a registering command for our Service Node would be
like this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;request transport-node-register nsxc.vlab.local admin admin mgmt-ip no tc-id 192.168.82.46 tc-uuid b948fd35-5737-4a30-8741-43134771d40c tc-type STT
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;create-a-gateway-service&quot;&gt;Create a Gateway Service&lt;/h4&gt;

&lt;p&gt;The next step would be to setup a Gateway Service. My lab lives within
VMware Fusion and for now I don’t really need an L2 or L3 Gateway
Service but since the purpose of this post is to illustrate NSX I decide
to configure one and let everything in place for a future expansion of
the lab.&lt;/p&gt;

&lt;p&gt;Remember that Gateway services can be of two types:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;L2 Gateway Service - Will expand logical network by connecting it to
a physical L2 segment.&lt;/li&gt;
  &lt;li&gt;L3 Gateway Service - Connects virtual router ports to physical to
physical IP networks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s important to note that in an NSX deployment you may connect only
one Gateway Service, either L2 or L3, to a given L2 physical segment.&lt;/p&gt;

&lt;h5 id=&quot;l3-service-setup&quot;&gt;L3 Service Setup&lt;/h5&gt;

&lt;p&gt;From NSX Manager Dashboard go to &lt;em&gt;Summary of Transport Components&lt;/em&gt;
section and in &lt;em&gt;Gateway Services&lt;/em&gt; click &lt;em&gt;Add&lt;/em&gt;. In the first step of the
Create Gateway Service wizard select the &lt;strong&gt;L3 Gateway Service&lt;/strong&gt; from the
drop-down menu.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/05/screen-shot-2014-05-03-at-13-11-51.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-05-03-at-13-11-51.png?w=580&quot; alt=&quot;Screen Shot 2014-05-03 at
13.11.51&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the second step configure the &lt;em&gt;Display Name&lt;/em&gt; for the new service and
click &lt;em&gt;Next&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/05/screen-shot-2014-05-03-at-13-15-36.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-05-03-at-13-15-36.png?w=580&quot; alt=&quot;Screen Shot 2014-05-03 at
13.15.36&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The third and final step is to bind our previously configured gateway
node to the service. Click &lt;em&gt;Add Gateway&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/05/screen-shot-2014-05-03-at-13-25-28.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-05-03-at-13-25-28.png?w=580&quot; alt=&quot;Screen Shot 2014-05-03 at
13.25.28&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;Edit Gateway&lt;/em&gt; pop-up select the UUID of the gateway node and the
network interface to be used, leave the &lt;em&gt;Failure Zone ID&lt;/em&gt; field blank.
This last field is used for high availability of L3 services, I will try
to write about this subject in a future post.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/05/screen-shot-2014-05-03-at-13-27-17.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-05-03-at-13-27-17.png?w=300&quot; alt=&quot;Screen Shot 2014-05-03 at
13.27.17&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;em&gt;Save &amp;amp; View&lt;/em&gt; and check the newly created Gateway Service.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/05/screen-shot-2014-05-03-at-13-40-48.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-05-03-at-13-40-48.png?w=580&quot; alt=&quot;Screen Shot 2014-05-03 at
13.40.48&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;l2-service-setup&quot;&gt;L2 Service Setup&lt;/h5&gt;

&lt;p&gt;To create a new L2 Gateway Service follow the same procedure as with L3
one and launch the &lt;em&gt;Create Gateway Service&lt;/em&gt; wizard.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Select &lt;em&gt;L2 Gateway Service&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Enter the name of the new service.&lt;/li&gt;
  &lt;li&gt;Add the gateway and fill in the UUID and network interface fields,
this screen is slightly different since there is no Failure Zone
ID field.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/05/screen-shot-2014-05-03-at-19-06-50.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-05-03-at-19-06-50.png?w=300&quot; alt=&quot;Screen Shot 2014-05-03 at
19.06.50&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please have in mind that the example of the above screenshot will fail
because you cannot use the same gateway appliance for two different L2
or L3 Gateway Services, if you need an L2 service deploy a new gateway
node and configure it following the above steps.&lt;/p&gt;

&lt;p&gt;With this step our Transport Network is almost setup, the only part left
would be to add the hypervisors to the Controller Cluster but I’ll left
that part for the next article.&lt;/p&gt;

&lt;h3 id=&quot;nsx-logical-network-view&quot;&gt;NSX Logical Network View&lt;/h3&gt;

&lt;p&gt;In any typical OpenStack deployment the logical network elements will
usually be created and configured not through the NSX Manager but NVP
API. The API would be called by OpenStack Neutron module using the
neutron plugin for VMware NSX either from Horizon dashboard or Neutron
command line. However I decided to explain how to create and configure
the different Logical Layer elements from NSX Manager.&lt;/p&gt;

&lt;p&gt;Before starting with a simple walk-through of the process we need first
to describe the different elements of the Logical Network. NSX Logical
Network provide a similar functionality of a dedicated Ethernet switch.
It recreates entities like switches, routers and ports and provides
management functionality for them through NVP API.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Logical Switch&lt;/strong&gt; - Recreates an Ethernet-type L2 service-model,
containing logical switch ports that can be configured to implement
a set of security and QoS policies.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Logical Router&lt;/strong&gt; - Provides L3 routing services for the
logical network. Can be configured to offer other services such as
NAT and routed connections to the external physical network.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Logical Switch Port&lt;/strong&gt; - Represents and provides a logical
connection point for virtual machines network interfaces (VIF),
router patch connections or an L2 gateway connection to an
external network.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Logical Router Port&lt;/strong&gt; - Provides the logical connection point for
a patch connection to a switch or L3 gateway connections.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Logical Port Attachment&lt;/strong&gt; - This is the logical equivalent of
connecting a network cable between an interface and a switch port.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;create-a-logical-switch&quot;&gt;Create a Logical Switch&lt;/h4&gt;

&lt;p&gt;Let’s start from the begging and create a Logical Switch. From &lt;em&gt;Summary
of Logical Components&lt;/em&gt; are in the &lt;em&gt;Dashboard&lt;/em&gt; screen click &lt;em&gt;Add&lt;/em&gt; in the
Switches row.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/05/screen-shot-2014-05-05-at-22-09-20.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-05-05-at-22-09-20.png&quot; alt=&quot;Screen Shot 2014-05-05 at
22.09.20&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Provide the name of new switch and click &lt;em&gt;Next&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/05/screen-shot-2014-05-05-at-22-14-23.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-05-05-at-22-14-23.png?w=580&quot; alt=&quot;Screen Shot 2014-05-05 at
22.14.23&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Properties&lt;/em&gt; there are two different settings:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Port Isolation Enabled - This setting basically disables VM to VM
communication by preventing communication between the different
logical ports of the switch.&lt;/li&gt;
  &lt;li&gt;Replication Mode - Determines which transport node handle
replication of broadcast, unknown-unicast and multicast (BUM)
traffic. There are two possible values:
    &lt;ul&gt;
      &lt;li&gt;Service Node - Traffic is sent  to the NSX Service Node to be
flooded to L2 logical segment. This is the default and
recommended setting.&lt;/li&gt;
      &lt;li&gt;Source Node - BUM traffic is handled directly by the source
hypervisor instead of a Service Node.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/05/screen-shot-2014-05-05-at-22-16-54.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-05-05-at-22-16-54.png?w=580&quot; alt=&quot;Screen Shot 2014-05-05 at
22.16.54&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next specify the transport binding for the logical switch. Click &lt;em&gt;Add
Binding&lt;/em&gt; and select the &lt;em&gt;Transport Type&lt;/em&gt; and the &lt;em&gt;Transport Zone UUID&lt;/em&gt;.
I’ve selected STT our previously created transport zone respectively.
For the transport type there are several types available:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;STT&lt;/li&gt;
  &lt;li&gt;GRE&lt;/li&gt;
  &lt;li&gt;Bridge&lt;/li&gt;
  &lt;li&gt;IPsec GRE&lt;/li&gt;
  &lt;li&gt;IPsec STT&lt;/li&gt;
  &lt;li&gt;VXLAN&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/05/screen-shot-2014-05-05-at-22-27-11.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-05-05-at-22-27-11.png?w=300&quot; alt=&quot;Screen Shot 2014-05-05 at
22.27.11&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;em&gt;Save &amp;amp; View&lt;/em&gt; to review our new logical switch, leave the router
connection for later.&lt;/p&gt;

&lt;h4 id=&quot;add-logical-switch-ports&quot;&gt;Add Logical Switch Ports&lt;/h4&gt;

&lt;p&gt;Once one or more logical switches have been created we can start adding
ports to them. Ports will provide connection points to our virtual
machines. Click &lt;em&gt;Add&lt;/em&gt; in the &lt;em&gt;Logical Ports&lt;/em&gt; row and the &lt;em&gt;Create Logical
Switch Port&lt;/em&gt; wizard will be started.&lt;/p&gt;

&lt;p&gt;Select the Logical Switch the port will belong to.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/05/screen-shot-2014-05-05-at-22-57-21.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-05-05-at-22-57-21.png?w=580&quot; alt=&quot;Screen Shot 2014-05-05 at
22.57.21&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Basics&lt;/em&gt; provide a descriptive name for the port, I tend to use the
convention &lt;code&gt;vm_name-port&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/05/screen-shot-2014-05-05-at-23-01-00.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-05-05-at-23-01-00.png?w=580&quot; alt=&quot;Screen Shot 2014-05-05 at
23.01.00&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;Properties&lt;/em&gt; screen you have the following filed available:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Port number - Optional parameter.&lt;/li&gt;
  &lt;li&gt;Admin Status Enabled - Enabled by default.&lt;/li&gt;
  &lt;li&gt;Logical Queue UUID - An optional parameter used to link the port to
a QOS policy.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/05/screen-shot-2014-05-05-at-23-07-01.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-05-05-at-23-07-01.png?w=580&quot; alt=&quot;Screen Shot 2014-05-05 at
23.07.01&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Leave the &lt;em&gt;Mirror Targets&lt;/em&gt; settings with the default values and move
forward to the &lt;em&gt;Attachment&lt;/em&gt; screen. Select VIF, virtual machine
interface, as &lt;em&gt;Attachment Type&lt;/em&gt;, select a hypervisor and the network
interface of the virtual machine.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/05/screen-shot-2014-05-06-at-01-32-23.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-05-06-at-01-32-23.png?w=580&quot; alt=&quot;Screen Shot 2014-05-06 at
01.32.23&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Attachments can all be of type:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;None&lt;/li&gt;
  &lt;li&gt;Extended Network Bridge&lt;/li&gt;
  &lt;li&gt;Mult-Domain Interconnect&lt;/li&gt;
  &lt;li&gt;L2 Gateway&lt;/li&gt;
  &lt;li&gt;Patch to logical router port&lt;/li&gt;
  &lt;li&gt;VTEP L2 Gateway&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example an Extended Network Bridged attachment should be configured
like this.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/05/screen-shot-2014-05-06-at-01-36-12.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-05-06-at-01-36-12.png?w=580&quot; alt=&quot;Screen Shot 2014-05-06 at
01.36.12&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;create-a-logical-router&quot;&gt;Create a Logical Router&lt;/h4&gt;

&lt;p&gt;Launch the &lt;em&gt;Create Logical Router&lt;/em&gt; dialog and set the name of the new
router in the first screen.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/05/screen-shot-2014-05-06-at-01-44-19.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-05-06-at-01-44-19.png?w=580&quot; alt=&quot;Screen Shot 2014-05-06 at
01.44.19&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In Properties select the Routing Type:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Routing Table - Allows to define static routes on the logical router&lt;/li&gt;
  &lt;li&gt;Single Default Route - Defines a single default route for all
traffic, routing all traffic through the L3 Gateway connecting the
router to the datacenter physical network.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tick &lt;em&gt;Enable NAT Synchronization&lt;/em&gt; checkbox in order to provide NAT
service through this logical router and want NAT rules to survive in the
event of a Gateway failover.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Replication Mode&lt;/em&gt; works in the same way as in the Logical Switch,
&lt;em&gt;Service Node&lt;/em&gt; is selected by default.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/05/screen-shot-2014-05-06-at-01-55-07.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-05-06-at-01-55-07.png?w=580&quot; alt=&quot;Screen Shot 2014-05-06 at
01.55.07&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Configure the &lt;em&gt;Distributed Logical Router&lt;/em&gt;. If the checkbox is unticked
it means the logical router will be a &lt;strong&gt;centralized logical router&lt;/strong&gt; and
all network traffic between virtual machines will be forwarded to the
NSX Service Nodes. On the contrary if you tick the checkbox it means it
will be a &lt;strong&gt;distributed logical router&lt;/strong&gt; and it will provide a one-hop
routing of VM to VM traffic, to be able to use this feature all
hypervisors running VMs using this router must be in the same transport
zone.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/05/screen-shot-2014-05-06-at-02-03-39.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-05-06-at-02-03-39.png?w=580&quot; alt=&quot;Screen Shot 2014-05-06 at
02.03.39&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;em&gt;Save &amp;amp; View&lt;/em&gt; to finish the process and review the new router.
Optionally at the last step you can assign an L3 Gateway Service and
configure the corresponding Logical Router Port.&lt;/p&gt;

&lt;p&gt;Select the UUID of the desired gateway service and configure the Logical
Router Port settings. In the example I choose the basic configuration
since I only need to provide the IP address for the port.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/05/screen-shot-2014-05-06-at-02-12-52.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-05-06-at-02-12-52.png?w=580&quot; alt=&quot;Screen Shot 2014-05-06 at
02.12.52&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;add-a-logical-router-port&quot;&gt;Add a Logical Router Port&lt;/h4&gt;

&lt;p&gt;To create and assign a logical port to an existent router launch the
corresponding wizard from &lt;em&gt;Summary of Logical Components&lt;/em&gt; table in the
&lt;em&gt;Dashboard&lt;/em&gt; screen.&lt;/p&gt;

&lt;p&gt;Select the Logical Router UUID from the drop-down.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/05/screen-shot-2014-05-06-at-22-12-57.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-05-06-at-22-12-57.png?w=580&quot; alt=&quot;Screen Shot 2014-05-06 at
22.12.57&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enter a name for the port and click Next to move to &lt;em&gt;Properties&lt;/em&gt; step.
The &lt;em&gt;Port Number&lt;/em&gt; and &lt;em&gt;MAC Address&lt;/em&gt; fields are optional, leave &lt;em&gt;Admin
Status Enabled&lt;/em&gt; checked. In the &lt;em&gt;IP Addresses&lt;/em&gt; table add the required IP
address, must be in IPv4 CIDR notation.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/05/screen-shot-2014-05-06-at-22-19-26.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-05-06-at-22-19-26.png?w=580&quot; alt=&quot;Screen Shot 2014-05-06 at
22.19.26&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Configure the attachment. For router ports the attachments can be set to
one of the following types:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;None&lt;/li&gt;
  &lt;li&gt;L3 Gateway&lt;/li&gt;
  &lt;li&gt;Patch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For my example lab this time I configured the attachment as a &lt;em&gt;Patch&lt;/em&gt;
one. You need to select the &lt;em&gt;Logical Switch UUID&lt;/em&gt; and the &lt;em&gt;Peer Port
UUID&lt;/em&gt;, this peer port is port in the logical switch and you have to
configure it either before creating the router port or you can create it
at this step.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/05/screen-shot-2014-05-06-at-22-36-10.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-05-06-at-22-36-10.png?w=580&quot; alt=&quot;Screen Shot 2014-05-06 at
22.36.10&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click &lt;em&gt;Save&lt;/em&gt; to finish the creation process.&lt;/p&gt;

&lt;p&gt;This completes the logical network part, it’s a very basic setup without
any security or QOS services but I hope that you gained a better
understanding of transport and logical network concepts and the
relationships between their different components. In third part of the
series we will review how to setup the KVM hypervisor and connect it to
the NSX infrastructure. Comments, corrections or questions are always
welcome.&lt;/p&gt;

&lt;p&gt;Juanma.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/cloud/linux/networking/openstack/vmware/deploying-openstack-with-kvm-and-vmware-nsx-part-2-configure-nsx-transport-and-logical-network-views/&quot;&gt;Deploying OpenStack with KVM and VMware NSX - Part 2: Configure NSX Transport and Logical network views&lt;/a&gt; was originally published by Juan Manuel Rey at &lt;a href=&quot;&quot;&gt;Juanma's Blog&lt;/a&gt; on May 06, 2014.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Deploying OpenStack with KVM and VMware NSX - Part 1: NSX overview and initial setup]]></title>
  <link rel="alternate" type="text/html" href="/cloud/linux/networking/openstack/vmware/deploying-openstack-with-kvm-and-vmware-nsx-part-1-nsx-overview-and-initial-setup/" />
  <id>/cloud/linux/networking/openstack/vmware/deploying-openstack-with-kvm-and-vmware-nsx-part-1-nsx-overview-and-initial-setup</id>
  <published>2014-04-29T23:28:40+02:00</published>
  <updated>2014-04-29T23:28:40+02:00</updated>
  <author>
    <name></name>
    <uri></uri>
    
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;http://www.openstack.org&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/openstack-cloud-software-vertical-large.png?w=150&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;If
you follow me on &lt;a href=&quot;http://twitter.com/jreypo&quot;&gt;Twitter&lt;/a&gt; or
&lt;a href=&quot;http://plus.google.com/107485549683160294074/&quot;&gt;Google+&lt;/a&gt; probably have
seen and increased number of tweets and posts about
&lt;strong&gt;&lt;a href=&quot;http://www.openstack.org&quot;&gt;OpenStack&lt;/a&gt;&lt;/strong&gt;,
&lt;strong&gt;&lt;a href=&quot;http://devstack.org/&quot;&gt;DevStack&lt;/a&gt;&lt;/strong&gt;,
&lt;strong&gt;&lt;a href=&quot;http://www.linux-kvm.org/page/Main_Page&quot;&gt;KVM&lt;/a&gt;&lt;/strong&gt; and other Linux
related topics. It’s no secret that I am a *nix guy however it wasn’t
until last year that I really discovered OpenStack. Oh yes I knew about
it, have read a ton of articles and watched some videos in YouTube but I
never had the opportunity to actually play with it until I sat on a
Hands on Lab about OpenStack and vSphere during VMworld in Barcelona
last October. After VMworld I started a personal project to learn as
much as possible about OpenStack, using some labs with KVM and vSphere
to try to achieve a decent level of proficiency. Finally this year I was
able to ramp up with NSX and decided to build a new lab with OpenStack,
KVM and NSX and document my progress here in my blog. So without further
ado here it is my first series of posts about OpenStack and NSX.&lt;/p&gt;

&lt;p&gt;During this series we will see how to deploy OpenStack with KVM as the
underlying hypervisor and VMware NSX for the networking part. I intended
to create a fairly comprehensive guide here for my personal reference
and as a learning exercise. All posts of the series are based on my
personal experience in a lab environment.&lt;/p&gt;

&lt;h3 id=&quot;lab-components&quot;&gt;Lab components&lt;/h3&gt;

&lt;p&gt;To illustrate the post I have created a lab with virtual machines
running on VMware Fusion in my MacBook Pro, but you can use any
virtualization software you want as long as it allows you to expose the
virtualization extensions to the virtual machine, for the KVM compute
node. We will need the following virtual machines&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cloud controller node&lt;/li&gt;
  &lt;li&gt;Nova compute node with KVM&lt;/li&gt;
  &lt;li&gt;Neutron networking node&lt;/li&gt;
  &lt;li&gt;GlusterFS storage node&lt;/li&gt;
  &lt;li&gt;NSX Controller&lt;/li&gt;
  &lt;li&gt;NSX Manager&lt;/li&gt;
  &lt;li&gt;NSX Service Node&lt;/li&gt;
  &lt;li&gt;NSX Gateway&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ll provide the exact hardware config of each virtual machine in its
own part. We will deploy OpenStack Havana using as reference one of the
architectures described in OpenStack Havana installation guide.&lt;/p&gt;

&lt;p&gt;You are probably asking yourself now why I’m using Havana when Icehouse
was released just a few weeks ago? There are two reasons for this, first
is that when I started to create my lab and decided to document my
progress here Icehouse wasn’t out yet and after it was released I
decided to stick with Havana because the NSX plugin for Neutron,
OpenStack network module, has not been updated yet for Icehouse.&lt;/p&gt;

&lt;p&gt;The software versions to be used are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OpenStack Havana&lt;/li&gt;
  &lt;li&gt;CentOS 6.4 - For OpenStack nodes&lt;/li&gt;
  &lt;li&gt;Fedora 20 - For GlusterFS storage node&lt;/li&gt;
  &lt;li&gt;NSX for multi-hypervisor&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have another Fedora 20 virtual machine providing DNS and NTP services
for the lab, I’m planning to add DHCP and OpenLDAP capabilities in the
future.&lt;/p&gt;

&lt;h3 id=&quot;nsx-deployment-overview&quot;&gt;NSX deployment overview&lt;/h3&gt;

&lt;h4 id=&quot;screen-shot-2014-04-24-at-2240407b7b20sitebaseurl207d7dassetsscreen-shot-2014-04-24-at-22-40-40pnghttpjreypofileswordpresscom201404screen-shot-2014-04-24-at-22-40-40pngthe-network-views&quot;&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/04/screen-shot-2014-04-24-at-22-40-40.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-04-24-at-22-40-40.png&quot; alt=&quot;Screen Shot 2014-04-24 at 22.40.40&quot; /&gt;&lt;/a&gt;The Network Views&lt;/h4&gt;

&lt;p&gt;The first concept you need to understand in NSX are the network views.
NSX defines two network views:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Logical Network View&lt;/li&gt;
  &lt;li&gt;Transport Network View&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;strong&gt;Logical Network View&lt;/strong&gt; is a representation of the network services
and connectivity that a virtual machine “see” in the cloud, basically
for the operating system running inside the VM the logical network view
is “the network” that it is connected to. The Logical Network View is
completely independent from the underlying physical network. It is made
of the logical ports, switches and routers that interconnects the
different virtual machines within a tenant and connect them to the
outside physical network. In a cloud each tenant will have its own
logical network view and would isolated from other tenants views.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Transport Network View&lt;/strong&gt; represents the physical devices that
underlie the logical networks. These devices or transport nodes, as they
are referred, can be hypervisors and the network appliances
interconnecting those hypervisors to the external physical network.
Every one of these transport nodes must run an instance of Open vSwitch.&lt;/p&gt;

&lt;h4 id=&quot;nsx-deployment-components&quot;&gt;NSX Deployment Components&lt;/h4&gt;

&lt;p&gt;An NSX deployment will be made out of the Control Plane and Data Plane.
Additionally there is a Management Plane comprised by the NSX Manager,
last one is not mandatory for an OpenStack deployment but it can be
useful.&lt;/p&gt;

&lt;h5 id=&quot;nsx-control-plane&quot;&gt;NSX Control Plane&lt;/h5&gt;

&lt;p&gt;The Control Plane is made of the &lt;strong&gt;NSX Controller Cluster&lt;/strong&gt;. This is an
OpenFlow controller that manages all the Open vSwitch devices running on
the transport nodes and a logical network manager that allow to build
and maintain all the logical networks carried by the transport nodes. It
provides consistency between logical network view and transport network
view. Internally it has several roles to manage the different tasks it
is responsible of.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Transport node management: Maintains connections with the different
OVS instances.&lt;/li&gt;
  &lt;li&gt;Logical network management: Monitors when endhosts get connected and
disconnected from OVS. Also implements logical connectivity and
policies by configuring OVS forwarding states.&lt;/li&gt;
  &lt;li&gt;Data persistence and replication: Stores data from OVS devices and
NVP API to provides persistence across all nodes of the cluster in
case of failure.&lt;/li&gt;
  &lt;li&gt;API server: Handles HTTP requests from external elements.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The NSX Controller is an scalable out cluster running on x86 hardware,
it supports a minimum of three nodes and a maximum of five. Single node
clusters are not supported although for the lab I deployed a single-node
one.&lt;/p&gt;

&lt;h5 id=&quot;nsx-data-plane&quot;&gt;NSX Data Plane&lt;/h5&gt;

&lt;p&gt;The Data Plane will be implemented by the previously referred transport
nodes, this is OVS devices and NSX appliances, managed by the Controller
Cluster.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hypervisors:&lt;/strong&gt; The compute nodes leveraging Open vSwitch to provide
network connectivity for the virtual machines.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NSX Gateway/s:&lt;/strong&gt; The NSX Gateways formed the Gateway Service that
allows a logical network to be attached to a physical network not
managed by NSX. The gateways can be L2 Gateway, expands L2 logical
segment to include a physical one, and L3 Gateway that maps itself to
physical router port.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NSX Service Node/s:&lt;/strong&gt; The Service Nodes are OVS enabled appliances
that provide extra processing capacity by offloading network packet
processing from the hypervisor virtual switches. The type of operations
managed by the service nodes are for example assisting with the packet
replication during broadcast/multicast operations or unknown multicast
flooding in overlay logical networks.&lt;/p&gt;

&lt;h5 id=&quot;nsx-management-plane&quot;&gt;NSX Management Plane&lt;/h5&gt;

&lt;p&gt;The NSX Management Plane is composed exclusively by the &lt;strong&gt;NSX Manager&lt;/strong&gt;.
Provides a different and more friendly way to interact with the NVP API,
and configure the logical network components for example, through its
web UI. In an OpenStack deployment there is need to use it, however it
can be helpful for troubleshooting purposes.&lt;/p&gt;

&lt;h3 id=&quot;nsx-network-appliances-deployment&quot;&gt;NSX network appliances deployment&lt;/h3&gt;

&lt;p&gt;For our lab purposes create four Ubuntu x64 virtual machines with 1vCPU,
1GB of RAM, 1 network interface (E1000) and 16GB of disk.&lt;/p&gt;

&lt;h4 id=&quot;nsx-controller&quot;&gt;NSX Controller&lt;/h4&gt;

&lt;p&gt;Power on the VM and on the boot screen select Automated Install.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/04/screen-shot-2014-04-27-at-20-49-15.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-04-27-at-20-49-15.png?w=580&quot; alt=&quot;Screen Shot 2014-04-27 at
20.49.15&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The installation will take several minutes to finish. When it’s finished
you will see a prompt like this in the virtual machine console.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/04/screen-shot-2014-04-27-at-22-42-11.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-04-27-at-22-42-11.png?w=580&quot; alt=&quot;Screen Shot 2014-04-27 at
22.42.11&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Login as &lt;code&gt;admin&lt;/code&gt; user with password admin. In a normal deployment you
will configure admin user password with &lt;code&gt;set admin user password&lt;/code&gt; but
for the lab is not needed.&lt;/p&gt;

&lt;p&gt;Set the IP address for the controller node.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nsx-controller # set network interface breth0 static 192.168.82.45 255.255.255.0
Setting IP for interface breth0...
Clearing DNS configuration...
nsx-controller #
nsx-controller # show network interface breth0
IP config: static
Address: 192.168.82.45
Netmask: 255.255.255.0
Broadcast: 192.168.82.255
MTU: 1500
MAC: 00:0c:29:92:ce:0c
Admin-Status: UP
Link-Status: UP
SNMP: disabled
nsx-controller #
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Configure the hostname.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nsx-controller # set hostname nsxc
nsxc #
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next configure the default route.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nsxc # add network route 0.0.0.0 0.0.0.0 192.168.82.2
nsxc #
nsxc # show network route
Prefix/Mask         Gateway         Metric  MTU     Iface
0.0.0.0/0           192.168.82.2    0       intf    breth0
192.168.82.0/24     0.0.0.0         0       intf    breth0
nsxc #
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Set the address of the DNS and NTP servers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nsxc # add network dns-server 192.168.82.110
nsxc #
nsxc # add network ntp-server 192.168.82.110
 * Stopping NTP server ntpd                                                                                                                                                          [ OK ]
Synchronizing with NTP servers. This may take a few seconds...
27 Apr 21:03:49 ntpdate[3755]: step time server 192.168.82.110 offset -7199.735794 sec
 * Starting NTP server ntpd                                                                                                                                                          [ OK ]
nsxc #
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Set the management address of the control cluster.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set control-cluster management-address 192.168.82.45
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Configure the IP address to be used for communication with the different
transport nodes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set control-cluster role switch_manager listen-ip 192.168.82.45
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Configure the IP address to handle NVP API requests.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set control-cluster role api_provider listen-ip 192.168.82.45
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally join the cluster, since this the first node of the cluster the
IP has to be its own one.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nsxc # join control-cluster 192.168.82.45
Clearing controller state and restarting
Stopping nicira-nvp-controller: [Done]
Clearing nicira-nvp-controller&#39;s state: OK
Starting nicira-nvp-controller: CLI revert file already exists
mapping eth0 -&amp;gt; bridged-pif
ssh stop/waiting
ssh start/running, process 5009
mapping breth0 -&amp;gt; eth0
mapping breth0 -&amp;gt; eth0
ssh stop/waiting
ssh start/running, process 5158
Setting core limit to unlimited
Setting file descriptor limit to 100000
 nicira-nvp-controller [OK]
** Watching control-cluster history; ctrl-c to exit **
===================================
Host nsx-controller
Node ffac511c-12b3-4dd0-baa7-632df4860521 (192.168.82.248)
  04/27 22:40:42: Initializing data contact with cluster
  04/27 22:40:49: Fetching initial configuration data
  04/27 22:40:51: Join complete
nsxc #
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can check at any moment the status of the node in the cluster with
the &lt;code&gt;show control-cluster status&lt;/code&gt; command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nsxc # show control-cluster status
Type                Status                                       Since
--------------------------------------------------------------------------------
Join status:        Join complete                                04/27 22:40:51
Majority status:    Disconnected from cluster majority           04/27 22:53:44
Restart status:     This controller can be safely restarted      04/27 21:23:29
Cluster ID:         7837a89a-22f3-4c8c-8bef-c100886374e9
Node UUID:          7837a89a-22f3-4c8c-8bef-c100886374e9

Role                Configured status   Active status
--------------------------------------------------------------------------------
api_provider        enabled             activated
persistence_server  enabled             activated
switch_manager      enabled             activated
logical_manager     enabled             activated
directory_server    disabled            disabled
nsxc #
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In a standard NSX deployment now would the moment to add more nodes to
the cluster using again the &lt;code&gt;join control-cluster&lt;/code&gt; command with the same
IP address.&lt;/p&gt;

&lt;h4 id=&quot;nsx-gateway&quot;&gt;NSX Gateway&lt;/h4&gt;

&lt;p&gt;Proceed with the Automated Install as in the Controller node. When the
installation is done login as &lt;code&gt;admin&lt;/code&gt; user.&lt;/p&gt;

&lt;p&gt;Set IP address.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set network interface breth0 static 192.168.82.47 255.255.255.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Set hostname.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set hostname nsxg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Configure the rest of the network parameters as in the Controller node
and proceed to the gateway specific configuration.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nsxg # add switch manager 192.168.82.45
Waiting for the manager CA certificate to synchronize...
Manager CA certificate synchronized
nsxg #
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;nsx-service-node&quot;&gt;NSX Service Node&lt;/h4&gt;

&lt;p&gt;Again launch the Automated Install and let it finish. As &lt;code&gt;admin&lt;/code&gt; user
configure the IP address…&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set network interface breth0 static 192.168.82.46 255.255.255.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;…and the hostname.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set hostname nsxsn
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finish the network configuration as in the Gateway and the Controller
and configure the Service Node to be aware of the Controller Cluster&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;add switch manager 192.168.82.45
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above command will return an error like this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Manager CA certificate failed to synchronize.  Verify
the manager is running on the specified IP address.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s normal since the Transport Node will not be able to connect to the
NSX Controller Cluster until the cluster has been informed, either via
NVP API or NSX Manager interface, about the existence of the Transport
Node.&lt;/p&gt;

&lt;h4 id=&quot;nsx-manager&quot;&gt;NSX Manager&lt;/h4&gt;

&lt;p&gt;Access the NSX Manager console, you have to see a similar screen.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/04/screen-shot-2014-04-28-at-00-47-54.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-04-28-at-00-47-54.png?w=580&quot; alt=&quot;Screen Shot 2014-04-28 at
00.47.54&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Set the IP and the hostname and configure the default route, DNS and NTP
server.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set network interface breth0 static 192.168.82.47 255.255.255.0
set hostname nsxm
add network route 0.0.0.0 0.0.0.0 192.168.82.2
add network dns-server 192.168.82.110
add network ntp-server 192.168.82.110
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this we have completed the installation and initial configuration
of our four NSX appliances. In a real world deployment we should have to
add at least two more NSX controller nodes to our cluster and maybe one
or more gateways in order to setup L2 and L3 Gateway Services. The
number of Service Nodes will depend on the expected load of our cloud.&lt;/p&gt;

&lt;h4 id=&quot;connect-the-nsx-manager-to-the-controller-cluster&quot;&gt;Connect the NSX Manager to the Controller Cluster&lt;/h4&gt;

&lt;p&gt;Our next step is to connect our newly crested NSX Controller Cluster
with NSX Manager. Access NSX Manager web interface and login as admin
user.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/04/screen-shot-2014-04-28-at-01-10-19.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-04-28-at-01-10-19.png&quot; alt=&quot;Screen Shot 2014-04-28 at
01.10.19&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the login the Manager will indicate that there is no Controller
Cluster added.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/04/screen-shot-2014-04-28-at-01-15-33.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-04-28-at-01-15-33.png?w=580&quot; alt=&quot;Screen Shot 2014-04-28 at
01.15.33&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click the &lt;em&gt;Add Cluster&lt;/em&gt; button and enter the data for the NSX Controller
Cluster.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/04/screen-shot-2014-04-28-at-01-26-03.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-04-28-at-01-26-03.png&quot; alt=&quot;Screen Shot 2014-04-28 at
01.26.03&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If the connection is successful the a new screen will show up.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/04/screen-shot-2014-04-28-at-01-36-29.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-04-28-at-01-36-29.png?w=580&quot; alt=&quot;Screen Shot 2014-04-28 at
01.36.29&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Provide the following information:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Name of the cluster&lt;/li&gt;
  &lt;li&gt;Contact email address of the administrator&lt;/li&gt;
  &lt;li&gt;Automatically Use New IPs - This setting, checked by default, will
add all the IP address of the members form this cluster as eligible
to receive API call from the NSX Manager.&lt;/li&gt;
  &lt;li&gt;Make Active Cluster&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the next screen enter the IP address of your syslog server or click
&lt;em&gt;Use This NSX Manager&lt;/em&gt; to use the NSX Manager as syslog server.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/04/screen-shot-2014-04-28-at-01-57-43.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-04-28-at-01-57-43.png?w=580&quot; alt=&quot;Screen Shot 2014-04-28 at
01.57.43&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After clicking in &lt;em&gt;Configure&lt;/em&gt; the Manager will finish the configuration
of the Controller Cluster and will go back the previous screen where we
can see the new cluster we have just added to the Manager.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jreypo.files.wordpress.com/2014/04/screen-shot-2014-04-28-at-02-01-44.png&quot;&gt;&lt;img src=&quot;%7B%7B%20site.baseurl%20%7D%7D/assets/screen-shot-2014-04-28-at-02-01-44.png?w=580&quot; alt=&quot;Screen Shot 2014-04-28 at
02.01.44&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the next post we will see how to configure NSX Transport and Logical
network elements. As always comments are welcome.&lt;/p&gt;

&lt;p&gt;Juanma.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/cloud/linux/networking/openstack/vmware/deploying-openstack-with-kvm-and-vmware-nsx-part-1-nsx-overview-and-initial-setup/&quot;&gt;Deploying OpenStack with KVM and VMware NSX - Part 1: NSX overview and initial setup&lt;/a&gt; was originally published by Juan Manuel Rey at &lt;a href=&quot;&quot;&gt;Juanma's Blog&lt;/a&gt; on April 29, 2014.&lt;/p&gt;
  </content>
</entry>

</feed>
